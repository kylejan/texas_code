// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: definition.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "definition.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace texas_code {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* Card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Card_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* JettonAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JettonAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerHandInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerHandInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Color_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Brand_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Action_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_definition_2eproto() {
  protobuf_AddDesc_definition_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "definition.proto");
  GOOGLE_CHECK(file != NULL);
  Card_descriptor_ = file->message_type(0);
  static const int Card_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, point_),
  };
  Card_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Card_descriptor_,
      Card::default_instance_,
      Card_offsets_,
      -1,
      -1,
      -1,
      sizeof(Card),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _is_default_instance_));
  Player_descriptor_ = file->message_type(1);
  static const int Player_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, bet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, account_name_),
  };
  Player_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Player_descriptor_,
      Player::default_instance_,
      Player_offsets_,
      -1,
      -1,
      -1,
      sizeof(Player),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _is_default_instance_));
  JettonAction_descriptor_ = file->message_type(2);
  static const int JettonAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JettonAction, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JettonAction, action_jetton_),
  };
  JettonAction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JettonAction_descriptor_,
      JettonAction::default_instance_,
      JettonAction_offsets_,
      -1,
      -1,
      -1,
      sizeof(JettonAction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JettonAction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JettonAction, _is_default_instance_));
  PlayerAction_descriptor_ = file->message_type(3);
  static const int PlayerAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAction, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAction, action_),
  };
  PlayerAction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerAction_descriptor_,
      PlayerAction::default_instance_,
      PlayerAction_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerAction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAction, _is_default_instance_));
  PlayerHandInfo_descriptor_ = file->message_type(4);
  static const int PlayerHandInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHandInfo, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHandInfo, card_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHandInfo, card_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHandInfo, nut_hand_brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHandInfo, nut_hand_),
  };
  PlayerHandInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerHandInfo_descriptor_,
      PlayerHandInfo::default_instance_,
      PlayerHandInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerHandInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHandInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHandInfo, _is_default_instance_));
  Color_descriptor_ = file->enum_type(0);
  Brand_descriptor_ = file->enum_type(1);
  Action_descriptor_ = file->enum_type(2);
  Status_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_definition_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Card_descriptor_, &Card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Player_descriptor_, &Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JettonAction_descriptor_, &JettonAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerAction_descriptor_, &PlayerAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerHandInfo_descriptor_, &PlayerHandInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_definition_2eproto() {
  delete Card::default_instance_;
  delete Card_reflection_;
  delete Player::default_instance_;
  delete Player_reflection_;
  delete JettonAction::default_instance_;
  delete JettonAction_reflection_;
  delete PlayerAction::default_instance_;
  delete PlayerAction_reflection_;
  delete PlayerHandInfo::default_instance_;
  delete PlayerHandInfo_reflection_;
}

void protobuf_AddDesc_definition_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020definition.proto\022\023texas_code.protocol\""
    "@\n\004Card\022)\n\005color\030\001 \001(\0162\032.texas_code.prot"
    "ocol.Color\022\r\n\005point\030\002 \001(\005\"g\n\006Player\022\n\n\002i"
    "d\030\001 \001(\005\022\014\n\004cash\030\002 \001(\003\022\016\n\006jetton\030\003 \001(\003\022\013\n"
    "\003bet\030\004 \001(\003\022\020\n\010position\030\005 \001(\005\022\024\n\014account_"
    "name\030\006 \001(\t\"R\n\014JettonAction\022+\n\006action\030\001 \001"
    "(\0162\033.texas_code.protocol.Action\022\025\n\ractio"
    "n_jetton\030\002 \001(\003\"n\n\014PlayerAction\022+\n\006player"
    "\030\001 \001(\0132\033.texas_code.protocol.Player\0221\n\006a"
    "ction\030\002 \001(\0132!.texas_code.protocol.Jetton"
    "Action\"\364\001\n\016PlayerHandInfo\022+\n\006player\030\001 \001("
    "\0132\033.texas_code.protocol.Player\022)\n\006card_1"
    "\030\002 \001(\0132\031.texas_code.protocol.Card\022)\n\006car"
    "d_2\030\003 \001(\0132\031.texas_code.protocol.Card\0222\n\016"
    "nut_hand_brand\030\004 \001(\0162\032.texas_code.protoc"
    "ol.Brand\022+\n\010nut_hand\030\005 \003(\0132\031.texas_code."
    "protocol.Card*8\n\005Color\022\014\n\010DIAMONDS\020\000\022\t\n\005"
    "CLUBS\020\001\022\n\n\006HEARTS\020\002\022\n\n\006SPADES\020\003*\262\001\n\005Bran"
    "d\022\r\n\tHIGH_CARD\020\000\022\014\n\010ONE_PAIR\020\001\022\014\n\010TWO_PA"
    "IR\020\002\022\023\n\017THREE_OF_A_KIND\020\003\022\014\n\010STRAIGHT\020\004\022"
    "\t\n\005FLUSH\020\005\022\016\n\nFULL_HOUSE\020\006\022\022\n\016FOUR_OF_A_"
    "KIND\020\007\022\022\n\016STRAIGHT_FLUSH\020\010\022\030\n\024ROYAL_STRA"
    "IGHT_FLUSH\020\t*U\n\006Action\022\007\n\003BET\020\000\022\010\n\004CALL\020"
    "\001\022\010\n\004FOLD\020\002\022\t\n\005CHECK\020\003\022\t\n\005RAISE\020\004\022\014\n\010RE_"
    "RAISE\020\005\022\n\n\006ALL_IN\020\006*D\n\006Status\022\013\n\007PREFLOP"
    "\020\000\022\010\n\004FLOP\020\001\022\010\n\004TURN\020\002\022\t\n\005RIVER\020\003\022\016\n\nSHO"
    "WN_DOWN\020\004b\006proto3", 1057);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "definition.proto", &protobuf_RegisterTypes);
  Card::default_instance_ = new Card();
  Player::default_instance_ = new Player();
  JettonAction::default_instance_ = new JettonAction();
  PlayerAction::default_instance_ = new PlayerAction();
  PlayerHandInfo::default_instance_ = new PlayerHandInfo();
  Card::default_instance_->InitAsDefaultInstance();
  Player::default_instance_->InitAsDefaultInstance();
  JettonAction::default_instance_->InitAsDefaultInstance();
  PlayerAction::default_instance_->InitAsDefaultInstance();
  PlayerHandInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_definition_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_definition_2eproto {
  StaticDescriptorInitializer_definition_2eproto() {
    protobuf_AddDesc_definition_2eproto();
  }
} static_descriptor_initializer_definition_2eproto_;
const ::google::protobuf::EnumDescriptor* Color_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Color_descriptor_;
}
bool Color_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Brand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Brand_descriptor_;
}
bool Brand_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_descriptor_;
}
bool Action_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}
bool Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Card::kColorFieldNumber;
const int Card::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Card::Card()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.Card)
}

void Card::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Card::Card(const Card& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.Card)
}

void Card::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  color_ = 0;
  point_ = 0;
}

Card::~Card() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.Card)
  SharedDtor();
}

void Card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Card_descriptor_;
}

const Card& Card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_definition_2eproto();
  return *default_instance_;
}

Card* Card::default_instance_ = NULL;

Card* Card::New(::google::protobuf::Arena* arena) const {
  Card* n = new Card;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Card::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Card*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(color_, point_);

#undef ZR_HELPER_
#undef ZR_

}

bool Card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.Card)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .texas_code.protocol.Color color = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::texas_code::protocol::Color >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }

      // optional int32 point = 2;
      case 2: {
        if (tag == 16) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.Card)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.Card)
  return false;
#undef DO_
}

void Card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.Card)
  // optional .texas_code.protocol.Color color = 1;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->color(), output);
  }

  // optional int32 point = 2;
  if (this->point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->point(), output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.Card)
}

::google::protobuf::uint8* Card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.Card)
  // optional .texas_code.protocol.Color color = 1;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->color(), target);
  }

  // optional int32 point = 2;
  if (this->point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->point(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.Card)
  return target;
}

int Card::ByteSize() const {
  int total_size = 0;

  // optional .texas_code.protocol.Color color = 1;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
  }

  // optional int32 point = 2;
  if (this->point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->point());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Card::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Card* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Card>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Card::MergeFrom(const Card& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.point() != 0) {
    set_point(from.point());
  }
}

void Card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Card::CopyFrom(const Card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Card::IsInitialized() const {

  return true;
}

void Card::Swap(Card* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Card::InternalSwap(Card* other) {
  std::swap(color_, other->color_);
  std::swap(point_, other->point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Card_descriptor_;
  metadata.reflection = Card_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Card

// optional .texas_code.protocol.Color color = 1;
void Card::clear_color() {
  color_ = 0;
}
 ::texas_code::protocol::Color Card::color() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.Card.color)
  return static_cast< ::texas_code::protocol::Color >(color_);
}
 void Card::set_color(::texas_code::protocol::Color value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.Card.color)
}

// optional int32 point = 2;
void Card::clear_point() {
  point_ = 0;
}
 ::google::protobuf::int32 Card::point() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.Card.point)
  return point_;
}
 void Card::set_point(::google::protobuf::int32 value) {
  
  point_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.Card.point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Player::kIdFieldNumber;
const int Player::kCashFieldNumber;
const int Player::kJettonFieldNumber;
const int Player::kBetFieldNumber;
const int Player::kPositionFieldNumber;
const int Player::kAccountNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Player::Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.Player)
}

void Player::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Player::Player(const Player& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.Player)
}

void Player::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  cash_ = GOOGLE_LONGLONG(0);
  jetton_ = GOOGLE_LONGLONG(0);
  bet_ = GOOGLE_LONGLONG(0);
  position_ = 0;
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.Player)
  SharedDtor();
}

void Player::SharedDtor() {
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_descriptor_;
}

const Player& Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_definition_2eproto();
  return *default_instance_;
}

Player* Player::default_instance_ = NULL;

Player* Player::New(::google::protobuf::Arena* arena) const {
  Player* n = new Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Player::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Player*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cash_, bet_);
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cash;
        break;
      }

      // optional int64 cash = 2;
      case 2: {
        if (tag == 16) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cash_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_jetton;
        break;
      }

      // optional int64 jetton = 3;
      case 3: {
        if (tag == 24) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jetton_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bet;
        break;
      }

      // optional int64 bet = 4;
      case 4: {
        if (tag == 32) {
         parse_bet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_position;
        break;
      }

      // optional int32 position = 5;
      case 5: {
        if (tag == 40) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account_name;
        break;
      }

      // optional string account_name = 6;
      case 6: {
        if (tag == 50) {
         parse_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "texas_code.protocol.Player.account_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.Player)
  return false;
#undef DO_
}

void Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.Player)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 cash = 2;
  if (this->cash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cash(), output);
  }

  // optional int64 jetton = 3;
  if (this->jetton() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->jetton(), output);
  }

  // optional int64 bet = 4;
  if (this->bet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->bet(), output);
  }

  // optional int32 position = 5;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->position(), output);
  }

  // optional string account_name = 6;
  if (this->account_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "texas_code.protocol.Player.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.Player)
}

::google::protobuf::uint8* Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.Player)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 cash = 2;
  if (this->cash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cash(), target);
  }

  // optional int64 jetton = 3;
  if (this->jetton() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->jetton(), target);
  }

  // optional int64 bet = 4;
  if (this->bet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->bet(), target);
  }

  // optional int32 position = 5;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->position(), target);
  }

  // optional string account_name = 6;
  if (this->account_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "texas_code.protocol.Player.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.Player)
  return target;
}

int Player::ByteSize() const {
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional int64 cash = 2;
  if (this->cash() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cash());
  }

  // optional int64 jetton = 3;
  if (this->jetton() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->jetton());
  }

  // optional int64 bet = 4;
  if (this->bet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bet());
  }

  // optional int32 position = 5;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  // optional string account_name = 6;
  if (this->account_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Player* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Player>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.cash() != 0) {
    set_cash(from.cash());
  }
  if (from.jetton() != 0) {
    set_jetton(from.jetton());
  }
  if (from.bet() != 0) {
    set_bet(from.bet());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.account_name().size() > 0) {

    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
}

void Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {

  return true;
}

void Player::Swap(Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Player::InternalSwap(Player* other) {
  std::swap(id_, other->id_);
  std::swap(cash_, other->cash_);
  std::swap(jetton_, other->jetton_);
  std::swap(bet_, other->bet_);
  std::swap(position_, other->position_);
  account_name_.Swap(&other->account_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_descriptor_;
  metadata.reflection = Player_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Player

// optional int32 id = 1;
void Player::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Player::id() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.Player.id)
  return id_;
}
 void Player::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.Player.id)
}

// optional int64 cash = 2;
void Player::clear_cash() {
  cash_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Player::cash() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.Player.cash)
  return cash_;
}
 void Player::set_cash(::google::protobuf::int64 value) {
  
  cash_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.Player.cash)
}

// optional int64 jetton = 3;
void Player::clear_jetton() {
  jetton_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Player::jetton() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.Player.jetton)
  return jetton_;
}
 void Player::set_jetton(::google::protobuf::int64 value) {
  
  jetton_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.Player.jetton)
}

// optional int64 bet = 4;
void Player::clear_bet() {
  bet_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Player::bet() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.Player.bet)
  return bet_;
}
 void Player::set_bet(::google::protobuf::int64 value) {
  
  bet_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.Player.bet)
}

// optional int32 position = 5;
void Player::clear_position() {
  position_ = 0;
}
 ::google::protobuf::int32 Player::position() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.Player.position)
  return position_;
}
 void Player::set_position(::google::protobuf::int32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.Player.position)
}

// optional string account_name = 6;
void Player::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Player::account_name() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.Player.account_name)
  return account_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Player::set_account_name(const ::std::string& value) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:texas_code.protocol.Player.account_name)
}
 void Player::set_account_name(const char* value) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:texas_code.protocol.Player.account_name)
}
 void Player::set_account_name(const char* value, size_t size) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:texas_code.protocol.Player.account_name)
}
 ::std::string* Player::mutable_account_name() {
  
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.Player.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Player::release_account_name() {
  
  return account_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Player::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    
  } else {
    
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.Player.account_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JettonAction::kActionFieldNumber;
const int JettonAction::kActionJettonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JettonAction::JettonAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.JettonAction)
}

void JettonAction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

JettonAction::JettonAction(const JettonAction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.JettonAction)
}

void JettonAction::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  action_ = 0;
  action_jetton_ = GOOGLE_LONGLONG(0);
}

JettonAction::~JettonAction() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.JettonAction)
  SharedDtor();
}

void JettonAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JettonAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JettonAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JettonAction_descriptor_;
}

const JettonAction& JettonAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_definition_2eproto();
  return *default_instance_;
}

JettonAction* JettonAction::default_instance_ = NULL;

JettonAction* JettonAction::New(::google::protobuf::Arena* arena) const {
  JettonAction* n = new JettonAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JettonAction::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<JettonAction*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(action_jetton_, action_);

#undef ZR_HELPER_
#undef ZR_

}

bool JettonAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.JettonAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .texas_code.protocol.Action action = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::texas_code::protocol::Action >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_action_jetton;
        break;
      }

      // optional int64 action_jetton = 2;
      case 2: {
        if (tag == 16) {
         parse_action_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &action_jetton_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.JettonAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.JettonAction)
  return false;
#undef DO_
}

void JettonAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.JettonAction)
  // optional .texas_code.protocol.Action action = 1;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional int64 action_jetton = 2;
  if (this->action_jetton() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->action_jetton(), output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.JettonAction)
}

::google::protobuf::uint8* JettonAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.JettonAction)
  // optional .texas_code.protocol.Action action = 1;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional int64 action_jetton = 2;
  if (this->action_jetton() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->action_jetton(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.JettonAction)
  return target;
}

int JettonAction::ByteSize() const {
  int total_size = 0;

  // optional .texas_code.protocol.Action action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  // optional int64 action_jetton = 2;
  if (this->action_jetton() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->action_jetton());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JettonAction::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const JettonAction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const JettonAction>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JettonAction::MergeFrom(const JettonAction& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.action_jetton() != 0) {
    set_action_jetton(from.action_jetton());
  }
}

void JettonAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JettonAction::CopyFrom(const JettonAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JettonAction::IsInitialized() const {

  return true;
}

void JettonAction::Swap(JettonAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JettonAction::InternalSwap(JettonAction* other) {
  std::swap(action_, other->action_);
  std::swap(action_jetton_, other->action_jetton_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JettonAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JettonAction_descriptor_;
  metadata.reflection = JettonAction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JettonAction

// optional .texas_code.protocol.Action action = 1;
void JettonAction::clear_action() {
  action_ = 0;
}
 ::texas_code::protocol::Action JettonAction::action() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.JettonAction.action)
  return static_cast< ::texas_code::protocol::Action >(action_);
}
 void JettonAction::set_action(::texas_code::protocol::Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.JettonAction.action)
}

// optional int64 action_jetton = 2;
void JettonAction::clear_action_jetton() {
  action_jetton_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 JettonAction::action_jetton() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.JettonAction.action_jetton)
  return action_jetton_;
}
 void JettonAction::set_action_jetton(::google::protobuf::int64 value) {
  
  action_jetton_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.JettonAction.action_jetton)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerAction::kPlayerFieldNumber;
const int PlayerAction::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerAction::PlayerAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.PlayerAction)
}

void PlayerAction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  player_ = const_cast< ::texas_code::protocol::Player*>(&::texas_code::protocol::Player::default_instance());
  action_ = const_cast< ::texas_code::protocol::JettonAction*>(&::texas_code::protocol::JettonAction::default_instance());
}

PlayerAction::PlayerAction(const PlayerAction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.PlayerAction)
}

void PlayerAction::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  player_ = NULL;
  action_ = NULL;
}

PlayerAction::~PlayerAction() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.PlayerAction)
  SharedDtor();
}

void PlayerAction::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
    delete action_;
  }
}

void PlayerAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerAction_descriptor_;
}

const PlayerAction& PlayerAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_definition_2eproto();
  return *default_instance_;
}

PlayerAction* PlayerAction::default_instance_ = NULL;

PlayerAction* PlayerAction::New(::google::protobuf::Arena* arena) const {
  PlayerAction* n = new PlayerAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerAction::Clear() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
  if (GetArenaNoVirtual() == NULL && action_ != NULL) delete action_;
  action_ = NULL;
}

bool PlayerAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.PlayerAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .texas_code.protocol.Player player = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_action;
        break;
      }

      // optional .texas_code.protocol.JettonAction action = 2;
      case 2: {
        if (tag == 18) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.PlayerAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.PlayerAction)
  return false;
#undef DO_
}

void PlayerAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.PlayerAction)
  // optional .texas_code.protocol.Player player = 1;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_, output);
  }

  // optional .texas_code.protocol.JettonAction action = 2;
  if (this->has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->action_, output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.PlayerAction)
}

::google::protobuf::uint8* PlayerAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.PlayerAction)
  // optional .texas_code.protocol.Player player = 1;
  if (this->has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->player_, target);
  }

  // optional .texas_code.protocol.JettonAction action = 2;
  if (this->has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->action_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.PlayerAction)
  return target;
}

int PlayerAction::ByteSize() const {
  int total_size = 0;

  // optional .texas_code.protocol.Player player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }

  // optional .texas_code.protocol.JettonAction action = 2;
  if (this->has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->action_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerAction::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerAction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerAction>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerAction::MergeFrom(const PlayerAction& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_player()) {
    mutable_player()->::texas_code::protocol::Player::MergeFrom(from.player());
  }
  if (from.has_action()) {
    mutable_action()->::texas_code::protocol::JettonAction::MergeFrom(from.action());
  }
}

void PlayerAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerAction::CopyFrom(const PlayerAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAction::IsInitialized() const {

  return true;
}

void PlayerAction::Swap(PlayerAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerAction::InternalSwap(PlayerAction* other) {
  std::swap(player_, other->player_);
  std::swap(action_, other->action_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerAction_descriptor_;
  metadata.reflection = PlayerAction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerAction

// optional .texas_code.protocol.Player player = 1;
bool PlayerAction::has_player() const {
  return !_is_default_instance_ && player_ != NULL;
}
void PlayerAction::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
const ::texas_code::protocol::Player& PlayerAction::player() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.PlayerAction.player)
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
::texas_code::protocol::Player* PlayerAction::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::texas_code::protocol::Player;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.PlayerAction.player)
  return player_;
}
::texas_code::protocol::Player* PlayerAction::release_player() {
  
  ::texas_code::protocol::Player* temp = player_;
  player_ = NULL;
  return temp;
}
void PlayerAction::set_allocated_player(::texas_code::protocol::Player* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.PlayerAction.player)
}

// optional .texas_code.protocol.JettonAction action = 2;
bool PlayerAction::has_action() const {
  return !_is_default_instance_ && action_ != NULL;
}
void PlayerAction::clear_action() {
  if (GetArenaNoVirtual() == NULL && action_ != NULL) delete action_;
  action_ = NULL;
}
const ::texas_code::protocol::JettonAction& PlayerAction::action() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.PlayerAction.action)
  return action_ != NULL ? *action_ : *default_instance_->action_;
}
::texas_code::protocol::JettonAction* PlayerAction::mutable_action() {
  
  if (action_ == NULL) {
    action_ = new ::texas_code::protocol::JettonAction;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.PlayerAction.action)
  return action_;
}
::texas_code::protocol::JettonAction* PlayerAction::release_action() {
  
  ::texas_code::protocol::JettonAction* temp = action_;
  action_ = NULL;
  return temp;
}
void PlayerAction::set_allocated_action(::texas_code::protocol::JettonAction* action) {
  delete action_;
  action_ = action;
  if (action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.PlayerAction.action)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerHandInfo::kPlayerFieldNumber;
const int PlayerHandInfo::kCard1FieldNumber;
const int PlayerHandInfo::kCard2FieldNumber;
const int PlayerHandInfo::kNutHandBrandFieldNumber;
const int PlayerHandInfo::kNutHandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerHandInfo::PlayerHandInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.PlayerHandInfo)
}

void PlayerHandInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  player_ = const_cast< ::texas_code::protocol::Player*>(&::texas_code::protocol::Player::default_instance());
  card_1_ = const_cast< ::texas_code::protocol::Card*>(&::texas_code::protocol::Card::default_instance());
  card_2_ = const_cast< ::texas_code::protocol::Card*>(&::texas_code::protocol::Card::default_instance());
}

PlayerHandInfo::PlayerHandInfo(const PlayerHandInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.PlayerHandInfo)
}

void PlayerHandInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  player_ = NULL;
  card_1_ = NULL;
  card_2_ = NULL;
  nut_hand_brand_ = 0;
}

PlayerHandInfo::~PlayerHandInfo() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.PlayerHandInfo)
  SharedDtor();
}

void PlayerHandInfo::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
    delete card_1_;
    delete card_2_;
  }
}

void PlayerHandInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerHandInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerHandInfo_descriptor_;
}

const PlayerHandInfo& PlayerHandInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_definition_2eproto();
  return *default_instance_;
}

PlayerHandInfo* PlayerHandInfo::default_instance_ = NULL;

PlayerHandInfo* PlayerHandInfo::New(::google::protobuf::Arena* arena) const {
  PlayerHandInfo* n = new PlayerHandInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerHandInfo::Clear() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
  if (GetArenaNoVirtual() == NULL && card_1_ != NULL) delete card_1_;
  card_1_ = NULL;
  if (GetArenaNoVirtual() == NULL && card_2_ != NULL) delete card_2_;
  card_2_ = NULL;
  nut_hand_brand_ = 0;
  nut_hand_.Clear();
}

bool PlayerHandInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.PlayerHandInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .texas_code.protocol.Player player = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_card_1;
        break;
      }

      // optional .texas_code.protocol.Card card_1 = 2;
      case 2: {
        if (tag == 18) {
         parse_card_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card_1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_card_2;
        break;
      }

      // optional .texas_code.protocol.Card card_2 = 3;
      case 3: {
        if (tag == 26) {
         parse_card_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card_2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nut_hand_brand;
        break;
      }

      // optional .texas_code.protocol.Brand nut_hand_brand = 4;
      case 4: {
        if (tag == 32) {
         parse_nut_hand_brand:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nut_hand_brand(static_cast< ::texas_code::protocol::Brand >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_nut_hand;
        break;
      }

      // repeated .texas_code.protocol.Card nut_hand = 5;
      case 5: {
        if (tag == 42) {
         parse_nut_hand:
          DO_(input->IncrementRecursionDepth());
         parse_loop_nut_hand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nut_hand()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_nut_hand;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.PlayerHandInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.PlayerHandInfo)
  return false;
#undef DO_
}

void PlayerHandInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.PlayerHandInfo)
  // optional .texas_code.protocol.Player player = 1;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_, output);
  }

  // optional .texas_code.protocol.Card card_1 = 2;
  if (this->has_card_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->card_1_, output);
  }

  // optional .texas_code.protocol.Card card_2 = 3;
  if (this->has_card_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->card_2_, output);
  }

  // optional .texas_code.protocol.Brand nut_hand_brand = 4;
  if (this->nut_hand_brand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->nut_hand_brand(), output);
  }

  // repeated .texas_code.protocol.Card nut_hand = 5;
  for (unsigned int i = 0, n = this->nut_hand_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->nut_hand(i), output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.PlayerHandInfo)
}

::google::protobuf::uint8* PlayerHandInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.PlayerHandInfo)
  // optional .texas_code.protocol.Player player = 1;
  if (this->has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->player_, target);
  }

  // optional .texas_code.protocol.Card card_1 = 2;
  if (this->has_card_1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->card_1_, target);
  }

  // optional .texas_code.protocol.Card card_2 = 3;
  if (this->has_card_2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->card_2_, target);
  }

  // optional .texas_code.protocol.Brand nut_hand_brand = 4;
  if (this->nut_hand_brand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->nut_hand_brand(), target);
  }

  // repeated .texas_code.protocol.Card nut_hand = 5;
  for (unsigned int i = 0, n = this->nut_hand_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->nut_hand(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.PlayerHandInfo)
  return target;
}

int PlayerHandInfo::ByteSize() const {
  int total_size = 0;

  // optional .texas_code.protocol.Player player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }

  // optional .texas_code.protocol.Card card_1 = 2;
  if (this->has_card_1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->card_1_);
  }

  // optional .texas_code.protocol.Card card_2 = 3;
  if (this->has_card_2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->card_2_);
  }

  // optional .texas_code.protocol.Brand nut_hand_brand = 4;
  if (this->nut_hand_brand() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nut_hand_brand());
  }

  // repeated .texas_code.protocol.Card nut_hand = 5;
  total_size += 1 * this->nut_hand_size();
  for (int i = 0; i < this->nut_hand_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nut_hand(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerHandInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerHandInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerHandInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerHandInfo::MergeFrom(const PlayerHandInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  nut_hand_.MergeFrom(from.nut_hand_);
  if (from.has_player()) {
    mutable_player()->::texas_code::protocol::Player::MergeFrom(from.player());
  }
  if (from.has_card_1()) {
    mutable_card_1()->::texas_code::protocol::Card::MergeFrom(from.card_1());
  }
  if (from.has_card_2()) {
    mutable_card_2()->::texas_code::protocol::Card::MergeFrom(from.card_2());
  }
  if (from.nut_hand_brand() != 0) {
    set_nut_hand_brand(from.nut_hand_brand());
  }
}

void PlayerHandInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerHandInfo::CopyFrom(const PlayerHandInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerHandInfo::IsInitialized() const {

  return true;
}

void PlayerHandInfo::Swap(PlayerHandInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerHandInfo::InternalSwap(PlayerHandInfo* other) {
  std::swap(player_, other->player_);
  std::swap(card_1_, other->card_1_);
  std::swap(card_2_, other->card_2_);
  std::swap(nut_hand_brand_, other->nut_hand_brand_);
  nut_hand_.UnsafeArenaSwap(&other->nut_hand_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerHandInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerHandInfo_descriptor_;
  metadata.reflection = PlayerHandInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerHandInfo

// optional .texas_code.protocol.Player player = 1;
bool PlayerHandInfo::has_player() const {
  return !_is_default_instance_ && player_ != NULL;
}
void PlayerHandInfo::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
const ::texas_code::protocol::Player& PlayerHandInfo::player() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.PlayerHandInfo.player)
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
::texas_code::protocol::Player* PlayerHandInfo::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::texas_code::protocol::Player;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.PlayerHandInfo.player)
  return player_;
}
::texas_code::protocol::Player* PlayerHandInfo::release_player() {
  
  ::texas_code::protocol::Player* temp = player_;
  player_ = NULL;
  return temp;
}
void PlayerHandInfo::set_allocated_player(::texas_code::protocol::Player* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.PlayerHandInfo.player)
}

// optional .texas_code.protocol.Card card_1 = 2;
bool PlayerHandInfo::has_card_1() const {
  return !_is_default_instance_ && card_1_ != NULL;
}
void PlayerHandInfo::clear_card_1() {
  if (GetArenaNoVirtual() == NULL && card_1_ != NULL) delete card_1_;
  card_1_ = NULL;
}
const ::texas_code::protocol::Card& PlayerHandInfo::card_1() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.PlayerHandInfo.card_1)
  return card_1_ != NULL ? *card_1_ : *default_instance_->card_1_;
}
::texas_code::protocol::Card* PlayerHandInfo::mutable_card_1() {
  
  if (card_1_ == NULL) {
    card_1_ = new ::texas_code::protocol::Card;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.PlayerHandInfo.card_1)
  return card_1_;
}
::texas_code::protocol::Card* PlayerHandInfo::release_card_1() {
  
  ::texas_code::protocol::Card* temp = card_1_;
  card_1_ = NULL;
  return temp;
}
void PlayerHandInfo::set_allocated_card_1(::texas_code::protocol::Card* card_1) {
  delete card_1_;
  card_1_ = card_1;
  if (card_1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.PlayerHandInfo.card_1)
}

// optional .texas_code.protocol.Card card_2 = 3;
bool PlayerHandInfo::has_card_2() const {
  return !_is_default_instance_ && card_2_ != NULL;
}
void PlayerHandInfo::clear_card_2() {
  if (GetArenaNoVirtual() == NULL && card_2_ != NULL) delete card_2_;
  card_2_ = NULL;
}
const ::texas_code::protocol::Card& PlayerHandInfo::card_2() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.PlayerHandInfo.card_2)
  return card_2_ != NULL ? *card_2_ : *default_instance_->card_2_;
}
::texas_code::protocol::Card* PlayerHandInfo::mutable_card_2() {
  
  if (card_2_ == NULL) {
    card_2_ = new ::texas_code::protocol::Card;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.PlayerHandInfo.card_2)
  return card_2_;
}
::texas_code::protocol::Card* PlayerHandInfo::release_card_2() {
  
  ::texas_code::protocol::Card* temp = card_2_;
  card_2_ = NULL;
  return temp;
}
void PlayerHandInfo::set_allocated_card_2(::texas_code::protocol::Card* card_2) {
  delete card_2_;
  card_2_ = card_2;
  if (card_2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.PlayerHandInfo.card_2)
}

// optional .texas_code.protocol.Brand nut_hand_brand = 4;
void PlayerHandInfo::clear_nut_hand_brand() {
  nut_hand_brand_ = 0;
}
 ::texas_code::protocol::Brand PlayerHandInfo::nut_hand_brand() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.PlayerHandInfo.nut_hand_brand)
  return static_cast< ::texas_code::protocol::Brand >(nut_hand_brand_);
}
 void PlayerHandInfo::set_nut_hand_brand(::texas_code::protocol::Brand value) {
  
  nut_hand_brand_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.PlayerHandInfo.nut_hand_brand)
}

// repeated .texas_code.protocol.Card nut_hand = 5;
int PlayerHandInfo::nut_hand_size() const {
  return nut_hand_.size();
}
void PlayerHandInfo::clear_nut_hand() {
  nut_hand_.Clear();
}
const ::texas_code::protocol::Card& PlayerHandInfo::nut_hand(int index) const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.PlayerHandInfo.nut_hand)
  return nut_hand_.Get(index);
}
::texas_code::protocol::Card* PlayerHandInfo::mutable_nut_hand(int index) {
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.PlayerHandInfo.nut_hand)
  return nut_hand_.Mutable(index);
}
::texas_code::protocol::Card* PlayerHandInfo::add_nut_hand() {
  // @@protoc_insertion_point(field_add:texas_code.protocol.PlayerHandInfo.nut_hand)
  return nut_hand_.Add();
}
::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Card >*
PlayerHandInfo::mutable_nut_hand() {
  // @@protoc_insertion_point(field_mutable_list:texas_code.protocol.PlayerHandInfo.nut_hand)
  return &nut_hand_;
}
const ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Card >&
PlayerHandInfo::nut_hand() const {
  // @@protoc_insertion_point(field_list:texas_code.protocol.PlayerHandInfo.nut_hand)
  return nut_hand_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace texas_code

// @@protoc_insertion_point(global_scope)
