// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "definition.pb.h"
// @@protoc_insertion_point(includes)

namespace texas_code {
namespace protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class ActionFailedResponse;
class ActionRequest;
class ActionSuccessResponse;
class BlindMessage;
class ConnectFailedResponse;
class ConnectRequest;
class ConnectSuccessResponse;
class FlopMessage;
class GameOverMessage;
class Heartbeat;
class HoldCardsMessage;
class InquireActionMessage;
class PotWinMessage;
class RiverMessage;
class SeatInfoMessage;
class ShowDownMessage;
class TurnMessage;

// ===================================================================

class ConnectRequest : public ::google::protobuf::Message {
 public:
  ConnectRequest();
  virtual ~ConnectRequest();

  ConnectRequest(const ConnectRequest& from);

  inline ConnectRequest& operator=(const ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectRequest& default_instance();

  void Swap(ConnectRequest* other);

  // implements Message ----------------------------------------------

  inline ConnectRequest* New() const { return New(NULL); }

  ConnectRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectRequest& from);
  void MergeFrom(const ConnectRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConnectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::int64 request_id() const;
  void set_request_id(::google::protobuf::int64 value);

  // optional string account_name = 2;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 2;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // @@protoc_insertion_point(class_scope:texas_code.protocol.ConnectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 request_id_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static ConnectRequest* default_instance_;
};
// -------------------------------------------------------------------

class ConnectSuccessResponse : public ::google::protobuf::Message {
 public:
  ConnectSuccessResponse();
  virtual ~ConnectSuccessResponse();

  ConnectSuccessResponse(const ConnectSuccessResponse& from);

  inline ConnectSuccessResponse& operator=(const ConnectSuccessResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectSuccessResponse& default_instance();

  void Swap(ConnectSuccessResponse* other);

  // implements Message ----------------------------------------------

  inline ConnectSuccessResponse* New() const { return New(NULL); }

  ConnectSuccessResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectSuccessResponse& from);
  void MergeFrom(const ConnectSuccessResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConnectSuccessResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::int64 request_id() const;
  void set_request_id(::google::protobuf::int64 value);

  // optional .texas_code.protocol.Player player = 2;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 2;
  const ::texas_code::protocol::Player& player() const;
  ::texas_code::protocol::Player* mutable_player();
  ::texas_code::protocol::Player* release_player();
  void set_allocated_player(::texas_code::protocol::Player* player);

  // @@protoc_insertion_point(class_scope:texas_code.protocol.ConnectSuccessResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 request_id_;
  ::texas_code::protocol::Player* player_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static ConnectSuccessResponse* default_instance_;
};
// -------------------------------------------------------------------

class ConnectFailedResponse : public ::google::protobuf::Message {
 public:
  ConnectFailedResponse();
  virtual ~ConnectFailedResponse();

  ConnectFailedResponse(const ConnectFailedResponse& from);

  inline ConnectFailedResponse& operator=(const ConnectFailedResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectFailedResponse& default_instance();

  void Swap(ConnectFailedResponse* other);

  // implements Message ----------------------------------------------

  inline ConnectFailedResponse* New() const { return New(NULL); }

  ConnectFailedResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectFailedResponse& from);
  void MergeFrom(const ConnectFailedResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConnectFailedResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::int64 request_id() const;
  void set_request_id(::google::protobuf::int64 value);

  // optional int32 error_code = 2;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // optional string error_msg = 3;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 3;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // @@protoc_insertion_point(class_scope:texas_code.protocol.ConnectFailedResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 request_id_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::int32 error_code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static ConnectFailedResponse* default_instance_;
};
// -------------------------------------------------------------------

class ActionRequest : public ::google::protobuf::Message {
 public:
  ActionRequest();
  virtual ~ActionRequest();

  ActionRequest(const ActionRequest& from);

  inline ActionRequest& operator=(const ActionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionRequest& default_instance();

  void Swap(ActionRequest* other);

  // implements Message ----------------------------------------------

  inline ActionRequest* New() const { return New(NULL); }

  ActionRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionRequest& from);
  void MergeFrom(const ActionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::int64 request_id() const;
  void set_request_id(::google::protobuf::int64 value);

  // optional .texas_code.protocol.JettonAction jetton_action = 2;
  bool has_jetton_action() const;
  void clear_jetton_action();
  static const int kJettonActionFieldNumber = 2;
  const ::texas_code::protocol::JettonAction& jetton_action() const;
  ::texas_code::protocol::JettonAction* mutable_jetton_action();
  ::texas_code::protocol::JettonAction* release_jetton_action();
  void set_allocated_jetton_action(::texas_code::protocol::JettonAction* jetton_action);

  // @@protoc_insertion_point(class_scope:texas_code.protocol.ActionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 request_id_;
  ::texas_code::protocol::JettonAction* jetton_action_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static ActionRequest* default_instance_;
};
// -------------------------------------------------------------------

class ActionSuccessResponse : public ::google::protobuf::Message {
 public:
  ActionSuccessResponse();
  virtual ~ActionSuccessResponse();

  ActionSuccessResponse(const ActionSuccessResponse& from);

  inline ActionSuccessResponse& operator=(const ActionSuccessResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionSuccessResponse& default_instance();

  void Swap(ActionSuccessResponse* other);

  // implements Message ----------------------------------------------

  inline ActionSuccessResponse* New() const { return New(NULL); }

  ActionSuccessResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionSuccessResponse& from);
  void MergeFrom(const ActionSuccessResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionSuccessResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::int64 request_id() const;
  void set_request_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:texas_code.protocol.ActionSuccessResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 request_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static ActionSuccessResponse* default_instance_;
};
// -------------------------------------------------------------------

class ActionFailedResponse : public ::google::protobuf::Message {
 public:
  ActionFailedResponse();
  virtual ~ActionFailedResponse();

  ActionFailedResponse(const ActionFailedResponse& from);

  inline ActionFailedResponse& operator=(const ActionFailedResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionFailedResponse& default_instance();

  void Swap(ActionFailedResponse* other);

  // implements Message ----------------------------------------------

  inline ActionFailedResponse* New() const { return New(NULL); }

  ActionFailedResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionFailedResponse& from);
  void MergeFrom(const ActionFailedResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionFailedResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 req_id = 1;
  void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  ::google::protobuf::int64 req_id() const;
  void set_req_id(::google::protobuf::int64 value);

  // optional int32 error_code = 2;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // optional string error_msg = 3;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 3;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // @@protoc_insertion_point(class_scope:texas_code.protocol.ActionFailedResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 req_id_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::int32 error_code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static ActionFailedResponse* default_instance_;
};
// -------------------------------------------------------------------

class SeatInfoMessage : public ::google::protobuf::Message {
 public:
  SeatInfoMessage();
  virtual ~SeatInfoMessage();

  SeatInfoMessage(const SeatInfoMessage& from);

  inline SeatInfoMessage& operator=(const SeatInfoMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeatInfoMessage& default_instance();

  void Swap(SeatInfoMessage* other);

  // implements Message ----------------------------------------------

  inline SeatInfoMessage* New() const { return New(NULL); }

  SeatInfoMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeatInfoMessage& from);
  void MergeFrom(const SeatInfoMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SeatInfoMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .texas_code.protocol.Player banker = 1;
  bool has_banker() const;
  void clear_banker();
  static const int kBankerFieldNumber = 1;
  const ::texas_code::protocol::Player& banker() const;
  ::texas_code::protocol::Player* mutable_banker();
  ::texas_code::protocol::Player* release_banker();
  void set_allocated_banker(::texas_code::protocol::Player* banker);

  // optional .texas_code.protocol.Player s_blind_player = 2;
  bool has_s_blind_player() const;
  void clear_s_blind_player();
  static const int kSBlindPlayerFieldNumber = 2;
  const ::texas_code::protocol::Player& s_blind_player() const;
  ::texas_code::protocol::Player* mutable_s_blind_player();
  ::texas_code::protocol::Player* release_s_blind_player();
  void set_allocated_s_blind_player(::texas_code::protocol::Player* s_blind_player);

  // optional .texas_code.protocol.Player b_blind_player = 3;
  bool has_b_blind_player() const;
  void clear_b_blind_player();
  static const int kBBlindPlayerFieldNumber = 3;
  const ::texas_code::protocol::Player& b_blind_player() const;
  ::texas_code::protocol::Player* mutable_b_blind_player();
  ::texas_code::protocol::Player* release_b_blind_player();
  void set_allocated_b_blind_player(::texas_code::protocol::Player* b_blind_player);

  // repeated .texas_code.protocol.Player other_players = 4;
  int other_players_size() const;
  void clear_other_players();
  static const int kOtherPlayersFieldNumber = 4;
  const ::texas_code::protocol::Player& other_players(int index) const;
  ::texas_code::protocol::Player* mutable_other_players(int index);
  ::texas_code::protocol::Player* add_other_players();
  ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Player >*
      mutable_other_players();
  const ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Player >&
      other_players() const;

  // @@protoc_insertion_point(class_scope:texas_code.protocol.SeatInfoMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::texas_code::protocol::Player* banker_;
  ::texas_code::protocol::Player* s_blind_player_;
  ::texas_code::protocol::Player* b_blind_player_;
  ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Player > other_players_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static SeatInfoMessage* default_instance_;
};
// -------------------------------------------------------------------

class BlindMessage : public ::google::protobuf::Message {
 public:
  BlindMessage();
  virtual ~BlindMessage();

  BlindMessage(const BlindMessage& from);

  inline BlindMessage& operator=(const BlindMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlindMessage& default_instance();

  void Swap(BlindMessage* other);

  // implements Message ----------------------------------------------

  inline BlindMessage* New() const { return New(NULL); }

  BlindMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlindMessage& from);
  void MergeFrom(const BlindMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlindMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::int32 request_id() const;
  void set_request_id(::google::protobuf::int32 value);

  // optional .texas_code.protocol.Player player = 2;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 2;
  const ::texas_code::protocol::Player& player() const;
  ::texas_code::protocol::Player* mutable_player();
  ::texas_code::protocol::Player* release_player();
  void set_allocated_player(::texas_code::protocol::Player* player);

  // optional int64 bet = 3;
  void clear_bet();
  static const int kBetFieldNumber = 3;
  ::google::protobuf::int64 bet() const;
  void set_bet(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:texas_code.protocol.BlindMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::texas_code::protocol::Player* player_;
  ::google::protobuf::int64 bet_;
  ::google::protobuf::int32 request_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static BlindMessage* default_instance_;
};
// -------------------------------------------------------------------

class HoldCardsMessage : public ::google::protobuf::Message {
 public:
  HoldCardsMessage();
  virtual ~HoldCardsMessage();

  HoldCardsMessage(const HoldCardsMessage& from);

  inline HoldCardsMessage& operator=(const HoldCardsMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HoldCardsMessage& default_instance();

  void Swap(HoldCardsMessage* other);

  // implements Message ----------------------------------------------

  inline HoldCardsMessage* New() const { return New(NULL); }

  HoldCardsMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HoldCardsMessage& from);
  void MergeFrom(const HoldCardsMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HoldCardsMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .texas_code.protocol.Card card_1 = 1;
  bool has_card_1() const;
  void clear_card_1();
  static const int kCard1FieldNumber = 1;
  const ::texas_code::protocol::Card& card_1() const;
  ::texas_code::protocol::Card* mutable_card_1();
  ::texas_code::protocol::Card* release_card_1();
  void set_allocated_card_1(::texas_code::protocol::Card* card_1);

  // optional .texas_code.protocol.Card card_2 = 2;
  bool has_card_2() const;
  void clear_card_2();
  static const int kCard2FieldNumber = 2;
  const ::texas_code::protocol::Card& card_2() const;
  ::texas_code::protocol::Card* mutable_card_2();
  ::texas_code::protocol::Card* release_card_2();
  void set_allocated_card_2(::texas_code::protocol::Card* card_2);

  // @@protoc_insertion_point(class_scope:texas_code.protocol.HoldCardsMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::texas_code::protocol::Card* card_1_;
  ::texas_code::protocol::Card* card_2_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static HoldCardsMessage* default_instance_;
};
// -------------------------------------------------------------------

class InquireActionMessage : public ::google::protobuf::Message {
 public:
  InquireActionMessage();
  virtual ~InquireActionMessage();

  InquireActionMessage(const InquireActionMessage& from);

  inline InquireActionMessage& operator=(const InquireActionMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InquireActionMessage& default_instance();

  void Swap(InquireActionMessage* other);

  // implements Message ----------------------------------------------

  inline InquireActionMessage* New() const { return New(NULL); }

  InquireActionMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InquireActionMessage& from);
  void MergeFrom(const InquireActionMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InquireActionMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::int64 request_id() const;
  void set_request_id(::google::protobuf::int64 value);

  // repeated .texas_code.protocol.PlayerAction player_actions = 2;
  int player_actions_size() const;
  void clear_player_actions();
  static const int kPlayerActionsFieldNumber = 2;
  const ::texas_code::protocol::PlayerAction& player_actions(int index) const;
  ::texas_code::protocol::PlayerAction* mutable_player_actions(int index);
  ::texas_code::protocol::PlayerAction* add_player_actions();
  ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::PlayerAction >*
      mutable_player_actions();
  const ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::PlayerAction >&
      player_actions() const;

  // optional int64 pot_amount = 3;
  void clear_pot_amount();
  static const int kPotAmountFieldNumber = 3;
  ::google::protobuf::int64 pot_amount() const;
  void set_pot_amount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:texas_code.protocol.InquireActionMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 request_id_;
  ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::PlayerAction > player_actions_;
  ::google::protobuf::int64 pot_amount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static InquireActionMessage* default_instance_;
};
// -------------------------------------------------------------------

class FlopMessage : public ::google::protobuf::Message {
 public:
  FlopMessage();
  virtual ~FlopMessage();

  FlopMessage(const FlopMessage& from);

  inline FlopMessage& operator=(const FlopMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlopMessage& default_instance();

  void Swap(FlopMessage* other);

  // implements Message ----------------------------------------------

  inline FlopMessage* New() const { return New(NULL); }

  FlopMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlopMessage& from);
  void MergeFrom(const FlopMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FlopMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .texas_code.protocol.Card flop_card_1 = 1;
  bool has_flop_card_1() const;
  void clear_flop_card_1();
  static const int kFlopCard1FieldNumber = 1;
  const ::texas_code::protocol::Card& flop_card_1() const;
  ::texas_code::protocol::Card* mutable_flop_card_1();
  ::texas_code::protocol::Card* release_flop_card_1();
  void set_allocated_flop_card_1(::texas_code::protocol::Card* flop_card_1);

  // optional .texas_code.protocol.Card flop_card_2 = 2;
  bool has_flop_card_2() const;
  void clear_flop_card_2();
  static const int kFlopCard2FieldNumber = 2;
  const ::texas_code::protocol::Card& flop_card_2() const;
  ::texas_code::protocol::Card* mutable_flop_card_2();
  ::texas_code::protocol::Card* release_flop_card_2();
  void set_allocated_flop_card_2(::texas_code::protocol::Card* flop_card_2);

  // optional .texas_code.protocol.Card flop_card_3 = 3;
  bool has_flop_card_3() const;
  void clear_flop_card_3();
  static const int kFlopCard3FieldNumber = 3;
  const ::texas_code::protocol::Card& flop_card_3() const;
  ::texas_code::protocol::Card* mutable_flop_card_3();
  ::texas_code::protocol::Card* release_flop_card_3();
  void set_allocated_flop_card_3(::texas_code::protocol::Card* flop_card_3);

  // @@protoc_insertion_point(class_scope:texas_code.protocol.FlopMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::texas_code::protocol::Card* flop_card_1_;
  ::texas_code::protocol::Card* flop_card_2_;
  ::texas_code::protocol::Card* flop_card_3_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static FlopMessage* default_instance_;
};
// -------------------------------------------------------------------

class TurnMessage : public ::google::protobuf::Message {
 public:
  TurnMessage();
  virtual ~TurnMessage();

  TurnMessage(const TurnMessage& from);

  inline TurnMessage& operator=(const TurnMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TurnMessage& default_instance();

  void Swap(TurnMessage* other);

  // implements Message ----------------------------------------------

  inline TurnMessage* New() const { return New(NULL); }

  TurnMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TurnMessage& from);
  void MergeFrom(const TurnMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TurnMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .texas_code.protocol.Card turn_card = 1;
  bool has_turn_card() const;
  void clear_turn_card();
  static const int kTurnCardFieldNumber = 1;
  const ::texas_code::protocol::Card& turn_card() const;
  ::texas_code::protocol::Card* mutable_turn_card();
  ::texas_code::protocol::Card* release_turn_card();
  void set_allocated_turn_card(::texas_code::protocol::Card* turn_card);

  // @@protoc_insertion_point(class_scope:texas_code.protocol.TurnMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::texas_code::protocol::Card* turn_card_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static TurnMessage* default_instance_;
};
// -------------------------------------------------------------------

class RiverMessage : public ::google::protobuf::Message {
 public:
  RiverMessage();
  virtual ~RiverMessage();

  RiverMessage(const RiverMessage& from);

  inline RiverMessage& operator=(const RiverMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RiverMessage& default_instance();

  void Swap(RiverMessage* other);

  // implements Message ----------------------------------------------

  inline RiverMessage* New() const { return New(NULL); }

  RiverMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RiverMessage& from);
  void MergeFrom(const RiverMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RiverMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .texas_code.protocol.Card river_card = 2;
  bool has_river_card() const;
  void clear_river_card();
  static const int kRiverCardFieldNumber = 2;
  const ::texas_code::protocol::Card& river_card() const;
  ::texas_code::protocol::Card* mutable_river_card();
  ::texas_code::protocol::Card* release_river_card();
  void set_allocated_river_card(::texas_code::protocol::Card* river_card);

  // @@protoc_insertion_point(class_scope:texas_code.protocol.RiverMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::texas_code::protocol::Card* river_card_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RiverMessage* default_instance_;
};
// -------------------------------------------------------------------

class ShowDownMessage : public ::google::protobuf::Message {
 public:
  ShowDownMessage();
  virtual ~ShowDownMessage();

  ShowDownMessage(const ShowDownMessage& from);

  inline ShowDownMessage& operator=(const ShowDownMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowDownMessage& default_instance();

  void Swap(ShowDownMessage* other);

  // implements Message ----------------------------------------------

  inline ShowDownMessage* New() const { return New(NULL); }

  ShowDownMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShowDownMessage& from);
  void MergeFrom(const ShowDownMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShowDownMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .texas_code.protocol.Card public_cards = 1;
  int public_cards_size() const;
  void clear_public_cards();
  static const int kPublicCardsFieldNumber = 1;
  const ::texas_code::protocol::Card& public_cards(int index) const;
  ::texas_code::protocol::Card* mutable_public_cards(int index);
  ::texas_code::protocol::Card* add_public_cards();
  ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Card >*
      mutable_public_cards();
  const ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Card >&
      public_cards() const;

  // repeated .texas_code.protocol.PlayerHandInfo hand_infos = 2;
  int hand_infos_size() const;
  void clear_hand_infos();
  static const int kHandInfosFieldNumber = 2;
  const ::texas_code::protocol::PlayerHandInfo& hand_infos(int index) const;
  ::texas_code::protocol::PlayerHandInfo* mutable_hand_infos(int index);
  ::texas_code::protocol::PlayerHandInfo* add_hand_infos();
  ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::PlayerHandInfo >*
      mutable_hand_infos();
  const ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::PlayerHandInfo >&
      hand_infos() const;

  // @@protoc_insertion_point(class_scope:texas_code.protocol.ShowDownMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Card > public_cards_;
  ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::PlayerHandInfo > hand_infos_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static ShowDownMessage* default_instance_;
};
// -------------------------------------------------------------------

class PotWinMessage : public ::google::protobuf::Message {
 public:
  PotWinMessage();
  virtual ~PotWinMessage();

  PotWinMessage(const PotWinMessage& from);

  inline PotWinMessage& operator=(const PotWinMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PotWinMessage& default_instance();

  void Swap(PotWinMessage* other);

  // implements Message ----------------------------------------------

  inline PotWinMessage* New() const { return New(NULL); }

  PotWinMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PotWinMessage& from);
  void MergeFrom(const PotWinMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PotWinMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .texas_code.protocol.Player players = 1;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 1;
  const ::texas_code::protocol::Player& players(int index) const;
  ::texas_code::protocol::Player* mutable_players(int index);
  ::texas_code::protocol::Player* add_players();
  ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Player >*
      mutable_players();
  const ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Player >&
      players() const;

  // repeated int64 pot_win = 2;
  int pot_win_size() const;
  void clear_pot_win();
  static const int kPotWinFieldNumber = 2;
  ::google::protobuf::int64 pot_win(int index) const;
  void set_pot_win(int index, ::google::protobuf::int64 value);
  void add_pot_win(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      pot_win() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_pot_win();

  // @@protoc_insertion_point(class_scope:texas_code.protocol.PotWinMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Player > players_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > pot_win_;
  mutable int _pot_win_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static PotWinMessage* default_instance_;
};
// -------------------------------------------------------------------

class GameOverMessage : public ::google::protobuf::Message {
 public:
  GameOverMessage();
  virtual ~GameOverMessage();

  GameOverMessage(const GameOverMessage& from);

  inline GameOverMessage& operator=(const GameOverMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameOverMessage& default_instance();

  void Swap(GameOverMessage* other);

  // implements Message ----------------------------------------------

  inline GameOverMessage* New() const { return New(NULL); }

  GameOverMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameOverMessage& from);
  void MergeFrom(const GameOverMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GameOverMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::int64 request_id() const;
  void set_request_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:texas_code.protocol.GameOverMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 request_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static GameOverMessage* default_instance_;
};
// -------------------------------------------------------------------

class Heartbeat : public ::google::protobuf::Message {
 public:
  Heartbeat();
  virtual ~Heartbeat();

  Heartbeat(const Heartbeat& from);

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Heartbeat& default_instance();

  void Swap(Heartbeat* other);

  // implements Message ----------------------------------------------

  inline Heartbeat* New() const { return New(NULL); }

  Heartbeat* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Heartbeat& from);
  void MergeFrom(const Heartbeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Heartbeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 sequence_num = 1;
  void clear_sequence_num();
  static const int kSequenceNumFieldNumber = 1;
  ::google::protobuf::int64 sequence_num() const;
  void set_sequence_num(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:texas_code.protocol.Heartbeat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 sequence_num_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Heartbeat* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectRequest

// optional int64 request_id = 1;
inline void ConnectRequest::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConnectRequest::request_id() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ConnectRequest.request_id)
  return request_id_;
}
inline void ConnectRequest::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.ConnectRequest.request_id)
}

// optional string account_name = 2;
inline void ConnectRequest::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectRequest::account_name() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ConnectRequest.account_name)
  return account_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectRequest::set_account_name(const ::std::string& value) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:texas_code.protocol.ConnectRequest.account_name)
}
inline void ConnectRequest::set_account_name(const char* value) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:texas_code.protocol.ConnectRequest.account_name)
}
inline void ConnectRequest::set_account_name(const char* value, size_t size) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:texas_code.protocol.ConnectRequest.account_name)
}
inline ::std::string* ConnectRequest::mutable_account_name() {
  
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.ConnectRequest.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectRequest::release_account_name() {
  
  return account_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectRequest::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    
  } else {
    
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.ConnectRequest.account_name)
}

// -------------------------------------------------------------------

// ConnectSuccessResponse

// optional int64 request_id = 1;
inline void ConnectSuccessResponse::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConnectSuccessResponse::request_id() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ConnectSuccessResponse.request_id)
  return request_id_;
}
inline void ConnectSuccessResponse::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.ConnectSuccessResponse.request_id)
}

// optional .texas_code.protocol.Player player = 2;
inline bool ConnectSuccessResponse::has_player() const {
  return !_is_default_instance_ && player_ != NULL;
}
inline void ConnectSuccessResponse::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
inline const ::texas_code::protocol::Player& ConnectSuccessResponse::player() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ConnectSuccessResponse.player)
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::texas_code::protocol::Player* ConnectSuccessResponse::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::texas_code::protocol::Player;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.ConnectSuccessResponse.player)
  return player_;
}
inline ::texas_code::protocol::Player* ConnectSuccessResponse::release_player() {
  
  ::texas_code::protocol::Player* temp = player_;
  player_ = NULL;
  return temp;
}
inline void ConnectSuccessResponse::set_allocated_player(::texas_code::protocol::Player* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.ConnectSuccessResponse.player)
}

// -------------------------------------------------------------------

// ConnectFailedResponse

// optional int64 request_id = 1;
inline void ConnectFailedResponse::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConnectFailedResponse::request_id() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ConnectFailedResponse.request_id)
  return request_id_;
}
inline void ConnectFailedResponse::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.ConnectFailedResponse.request_id)
}

// optional int32 error_code = 2;
inline void ConnectFailedResponse::clear_error_code() {
  error_code_ = 0;
}
inline ::google::protobuf::int32 ConnectFailedResponse::error_code() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ConnectFailedResponse.error_code)
  return error_code_;
}
inline void ConnectFailedResponse::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.ConnectFailedResponse.error_code)
}

// optional string error_msg = 3;
inline void ConnectFailedResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectFailedResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ConnectFailedResponse.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectFailedResponse::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:texas_code.protocol.ConnectFailedResponse.error_msg)
}
inline void ConnectFailedResponse::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:texas_code.protocol.ConnectFailedResponse.error_msg)
}
inline void ConnectFailedResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:texas_code.protocol.ConnectFailedResponse.error_msg)
}
inline ::std::string* ConnectFailedResponse::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.ConnectFailedResponse.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectFailedResponse::release_error_msg() {
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectFailedResponse::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.ConnectFailedResponse.error_msg)
}

// -------------------------------------------------------------------

// ActionRequest

// optional int64 request_id = 1;
inline void ActionRequest::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ActionRequest::request_id() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ActionRequest.request_id)
  return request_id_;
}
inline void ActionRequest::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.ActionRequest.request_id)
}

// optional .texas_code.protocol.JettonAction jetton_action = 2;
inline bool ActionRequest::has_jetton_action() const {
  return !_is_default_instance_ && jetton_action_ != NULL;
}
inline void ActionRequest::clear_jetton_action() {
  if (GetArenaNoVirtual() == NULL && jetton_action_ != NULL) delete jetton_action_;
  jetton_action_ = NULL;
}
inline const ::texas_code::protocol::JettonAction& ActionRequest::jetton_action() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ActionRequest.jetton_action)
  return jetton_action_ != NULL ? *jetton_action_ : *default_instance_->jetton_action_;
}
inline ::texas_code::protocol::JettonAction* ActionRequest::mutable_jetton_action() {
  
  if (jetton_action_ == NULL) {
    jetton_action_ = new ::texas_code::protocol::JettonAction;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.ActionRequest.jetton_action)
  return jetton_action_;
}
inline ::texas_code::protocol::JettonAction* ActionRequest::release_jetton_action() {
  
  ::texas_code::protocol::JettonAction* temp = jetton_action_;
  jetton_action_ = NULL;
  return temp;
}
inline void ActionRequest::set_allocated_jetton_action(::texas_code::protocol::JettonAction* jetton_action) {
  delete jetton_action_;
  jetton_action_ = jetton_action;
  if (jetton_action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.ActionRequest.jetton_action)
}

// -------------------------------------------------------------------

// ActionSuccessResponse

// optional int64 request_id = 1;
inline void ActionSuccessResponse::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ActionSuccessResponse::request_id() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ActionSuccessResponse.request_id)
  return request_id_;
}
inline void ActionSuccessResponse::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.ActionSuccessResponse.request_id)
}

// -------------------------------------------------------------------

// ActionFailedResponse

// optional int64 req_id = 1;
inline void ActionFailedResponse::clear_req_id() {
  req_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ActionFailedResponse::req_id() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ActionFailedResponse.req_id)
  return req_id_;
}
inline void ActionFailedResponse::set_req_id(::google::protobuf::int64 value) {
  
  req_id_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.ActionFailedResponse.req_id)
}

// optional int32 error_code = 2;
inline void ActionFailedResponse::clear_error_code() {
  error_code_ = 0;
}
inline ::google::protobuf::int32 ActionFailedResponse::error_code() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ActionFailedResponse.error_code)
  return error_code_;
}
inline void ActionFailedResponse::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.ActionFailedResponse.error_code)
}

// optional string error_msg = 3;
inline void ActionFailedResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActionFailedResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ActionFailedResponse.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActionFailedResponse::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:texas_code.protocol.ActionFailedResponse.error_msg)
}
inline void ActionFailedResponse::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:texas_code.protocol.ActionFailedResponse.error_msg)
}
inline void ActionFailedResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:texas_code.protocol.ActionFailedResponse.error_msg)
}
inline ::std::string* ActionFailedResponse::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.ActionFailedResponse.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActionFailedResponse::release_error_msg() {
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActionFailedResponse::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.ActionFailedResponse.error_msg)
}

// -------------------------------------------------------------------

// SeatInfoMessage

// optional .texas_code.protocol.Player banker = 1;
inline bool SeatInfoMessage::has_banker() const {
  return !_is_default_instance_ && banker_ != NULL;
}
inline void SeatInfoMessage::clear_banker() {
  if (GetArenaNoVirtual() == NULL && banker_ != NULL) delete banker_;
  banker_ = NULL;
}
inline const ::texas_code::protocol::Player& SeatInfoMessage::banker() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.SeatInfoMessage.banker)
  return banker_ != NULL ? *banker_ : *default_instance_->banker_;
}
inline ::texas_code::protocol::Player* SeatInfoMessage::mutable_banker() {
  
  if (banker_ == NULL) {
    banker_ = new ::texas_code::protocol::Player;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.SeatInfoMessage.banker)
  return banker_;
}
inline ::texas_code::protocol::Player* SeatInfoMessage::release_banker() {
  
  ::texas_code::protocol::Player* temp = banker_;
  banker_ = NULL;
  return temp;
}
inline void SeatInfoMessage::set_allocated_banker(::texas_code::protocol::Player* banker) {
  delete banker_;
  banker_ = banker;
  if (banker) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.SeatInfoMessage.banker)
}

// optional .texas_code.protocol.Player s_blind_player = 2;
inline bool SeatInfoMessage::has_s_blind_player() const {
  return !_is_default_instance_ && s_blind_player_ != NULL;
}
inline void SeatInfoMessage::clear_s_blind_player() {
  if (GetArenaNoVirtual() == NULL && s_blind_player_ != NULL) delete s_blind_player_;
  s_blind_player_ = NULL;
}
inline const ::texas_code::protocol::Player& SeatInfoMessage::s_blind_player() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.SeatInfoMessage.s_blind_player)
  return s_blind_player_ != NULL ? *s_blind_player_ : *default_instance_->s_blind_player_;
}
inline ::texas_code::protocol::Player* SeatInfoMessage::mutable_s_blind_player() {
  
  if (s_blind_player_ == NULL) {
    s_blind_player_ = new ::texas_code::protocol::Player;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.SeatInfoMessage.s_blind_player)
  return s_blind_player_;
}
inline ::texas_code::protocol::Player* SeatInfoMessage::release_s_blind_player() {
  
  ::texas_code::protocol::Player* temp = s_blind_player_;
  s_blind_player_ = NULL;
  return temp;
}
inline void SeatInfoMessage::set_allocated_s_blind_player(::texas_code::protocol::Player* s_blind_player) {
  delete s_blind_player_;
  s_blind_player_ = s_blind_player;
  if (s_blind_player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.SeatInfoMessage.s_blind_player)
}

// optional .texas_code.protocol.Player b_blind_player = 3;
inline bool SeatInfoMessage::has_b_blind_player() const {
  return !_is_default_instance_ && b_blind_player_ != NULL;
}
inline void SeatInfoMessage::clear_b_blind_player() {
  if (GetArenaNoVirtual() == NULL && b_blind_player_ != NULL) delete b_blind_player_;
  b_blind_player_ = NULL;
}
inline const ::texas_code::protocol::Player& SeatInfoMessage::b_blind_player() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.SeatInfoMessage.b_blind_player)
  return b_blind_player_ != NULL ? *b_blind_player_ : *default_instance_->b_blind_player_;
}
inline ::texas_code::protocol::Player* SeatInfoMessage::mutable_b_blind_player() {
  
  if (b_blind_player_ == NULL) {
    b_blind_player_ = new ::texas_code::protocol::Player;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.SeatInfoMessage.b_blind_player)
  return b_blind_player_;
}
inline ::texas_code::protocol::Player* SeatInfoMessage::release_b_blind_player() {
  
  ::texas_code::protocol::Player* temp = b_blind_player_;
  b_blind_player_ = NULL;
  return temp;
}
inline void SeatInfoMessage::set_allocated_b_blind_player(::texas_code::protocol::Player* b_blind_player) {
  delete b_blind_player_;
  b_blind_player_ = b_blind_player;
  if (b_blind_player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.SeatInfoMessage.b_blind_player)
}

// repeated .texas_code.protocol.Player other_players = 4;
inline int SeatInfoMessage::other_players_size() const {
  return other_players_.size();
}
inline void SeatInfoMessage::clear_other_players() {
  other_players_.Clear();
}
inline const ::texas_code::protocol::Player& SeatInfoMessage::other_players(int index) const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.SeatInfoMessage.other_players)
  return other_players_.Get(index);
}
inline ::texas_code::protocol::Player* SeatInfoMessage::mutable_other_players(int index) {
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.SeatInfoMessage.other_players)
  return other_players_.Mutable(index);
}
inline ::texas_code::protocol::Player* SeatInfoMessage::add_other_players() {
  // @@protoc_insertion_point(field_add:texas_code.protocol.SeatInfoMessage.other_players)
  return other_players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Player >*
SeatInfoMessage::mutable_other_players() {
  // @@protoc_insertion_point(field_mutable_list:texas_code.protocol.SeatInfoMessage.other_players)
  return &other_players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Player >&
SeatInfoMessage::other_players() const {
  // @@protoc_insertion_point(field_list:texas_code.protocol.SeatInfoMessage.other_players)
  return other_players_;
}

// -------------------------------------------------------------------

// BlindMessage

// optional int32 request_id = 1;
inline void BlindMessage::clear_request_id() {
  request_id_ = 0;
}
inline ::google::protobuf::int32 BlindMessage::request_id() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.BlindMessage.request_id)
  return request_id_;
}
inline void BlindMessage::set_request_id(::google::protobuf::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.BlindMessage.request_id)
}

// optional .texas_code.protocol.Player player = 2;
inline bool BlindMessage::has_player() const {
  return !_is_default_instance_ && player_ != NULL;
}
inline void BlindMessage::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
inline const ::texas_code::protocol::Player& BlindMessage::player() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.BlindMessage.player)
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::texas_code::protocol::Player* BlindMessage::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::texas_code::protocol::Player;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.BlindMessage.player)
  return player_;
}
inline ::texas_code::protocol::Player* BlindMessage::release_player() {
  
  ::texas_code::protocol::Player* temp = player_;
  player_ = NULL;
  return temp;
}
inline void BlindMessage::set_allocated_player(::texas_code::protocol::Player* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.BlindMessage.player)
}

// optional int64 bet = 3;
inline void BlindMessage::clear_bet() {
  bet_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BlindMessage::bet() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.BlindMessage.bet)
  return bet_;
}
inline void BlindMessage::set_bet(::google::protobuf::int64 value) {
  
  bet_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.BlindMessage.bet)
}

// -------------------------------------------------------------------

// HoldCardsMessage

// optional .texas_code.protocol.Card card_1 = 1;
inline bool HoldCardsMessage::has_card_1() const {
  return !_is_default_instance_ && card_1_ != NULL;
}
inline void HoldCardsMessage::clear_card_1() {
  if (GetArenaNoVirtual() == NULL && card_1_ != NULL) delete card_1_;
  card_1_ = NULL;
}
inline const ::texas_code::protocol::Card& HoldCardsMessage::card_1() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.HoldCardsMessage.card_1)
  return card_1_ != NULL ? *card_1_ : *default_instance_->card_1_;
}
inline ::texas_code::protocol::Card* HoldCardsMessage::mutable_card_1() {
  
  if (card_1_ == NULL) {
    card_1_ = new ::texas_code::protocol::Card;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.HoldCardsMessage.card_1)
  return card_1_;
}
inline ::texas_code::protocol::Card* HoldCardsMessage::release_card_1() {
  
  ::texas_code::protocol::Card* temp = card_1_;
  card_1_ = NULL;
  return temp;
}
inline void HoldCardsMessage::set_allocated_card_1(::texas_code::protocol::Card* card_1) {
  delete card_1_;
  card_1_ = card_1;
  if (card_1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.HoldCardsMessage.card_1)
}

// optional .texas_code.protocol.Card card_2 = 2;
inline bool HoldCardsMessage::has_card_2() const {
  return !_is_default_instance_ && card_2_ != NULL;
}
inline void HoldCardsMessage::clear_card_2() {
  if (GetArenaNoVirtual() == NULL && card_2_ != NULL) delete card_2_;
  card_2_ = NULL;
}
inline const ::texas_code::protocol::Card& HoldCardsMessage::card_2() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.HoldCardsMessage.card_2)
  return card_2_ != NULL ? *card_2_ : *default_instance_->card_2_;
}
inline ::texas_code::protocol::Card* HoldCardsMessage::mutable_card_2() {
  
  if (card_2_ == NULL) {
    card_2_ = new ::texas_code::protocol::Card;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.HoldCardsMessage.card_2)
  return card_2_;
}
inline ::texas_code::protocol::Card* HoldCardsMessage::release_card_2() {
  
  ::texas_code::protocol::Card* temp = card_2_;
  card_2_ = NULL;
  return temp;
}
inline void HoldCardsMessage::set_allocated_card_2(::texas_code::protocol::Card* card_2) {
  delete card_2_;
  card_2_ = card_2;
  if (card_2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.HoldCardsMessage.card_2)
}

// -------------------------------------------------------------------

// InquireActionMessage

// optional int64 request_id = 1;
inline void InquireActionMessage::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InquireActionMessage::request_id() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.InquireActionMessage.request_id)
  return request_id_;
}
inline void InquireActionMessage::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.InquireActionMessage.request_id)
}

// repeated .texas_code.protocol.PlayerAction player_actions = 2;
inline int InquireActionMessage::player_actions_size() const {
  return player_actions_.size();
}
inline void InquireActionMessage::clear_player_actions() {
  player_actions_.Clear();
}
inline const ::texas_code::protocol::PlayerAction& InquireActionMessage::player_actions(int index) const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.InquireActionMessage.player_actions)
  return player_actions_.Get(index);
}
inline ::texas_code::protocol::PlayerAction* InquireActionMessage::mutable_player_actions(int index) {
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.InquireActionMessage.player_actions)
  return player_actions_.Mutable(index);
}
inline ::texas_code::protocol::PlayerAction* InquireActionMessage::add_player_actions() {
  // @@protoc_insertion_point(field_add:texas_code.protocol.InquireActionMessage.player_actions)
  return player_actions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::PlayerAction >*
InquireActionMessage::mutable_player_actions() {
  // @@protoc_insertion_point(field_mutable_list:texas_code.protocol.InquireActionMessage.player_actions)
  return &player_actions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::PlayerAction >&
InquireActionMessage::player_actions() const {
  // @@protoc_insertion_point(field_list:texas_code.protocol.InquireActionMessage.player_actions)
  return player_actions_;
}

// optional int64 pot_amount = 3;
inline void InquireActionMessage::clear_pot_amount() {
  pot_amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InquireActionMessage::pot_amount() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.InquireActionMessage.pot_amount)
  return pot_amount_;
}
inline void InquireActionMessage::set_pot_amount(::google::protobuf::int64 value) {
  
  pot_amount_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.InquireActionMessage.pot_amount)
}

// -------------------------------------------------------------------

// FlopMessage

// optional .texas_code.protocol.Card flop_card_1 = 1;
inline bool FlopMessage::has_flop_card_1() const {
  return !_is_default_instance_ && flop_card_1_ != NULL;
}
inline void FlopMessage::clear_flop_card_1() {
  if (GetArenaNoVirtual() == NULL && flop_card_1_ != NULL) delete flop_card_1_;
  flop_card_1_ = NULL;
}
inline const ::texas_code::protocol::Card& FlopMessage::flop_card_1() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.FlopMessage.flop_card_1)
  return flop_card_1_ != NULL ? *flop_card_1_ : *default_instance_->flop_card_1_;
}
inline ::texas_code::protocol::Card* FlopMessage::mutable_flop_card_1() {
  
  if (flop_card_1_ == NULL) {
    flop_card_1_ = new ::texas_code::protocol::Card;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.FlopMessage.flop_card_1)
  return flop_card_1_;
}
inline ::texas_code::protocol::Card* FlopMessage::release_flop_card_1() {
  
  ::texas_code::protocol::Card* temp = flop_card_1_;
  flop_card_1_ = NULL;
  return temp;
}
inline void FlopMessage::set_allocated_flop_card_1(::texas_code::protocol::Card* flop_card_1) {
  delete flop_card_1_;
  flop_card_1_ = flop_card_1;
  if (flop_card_1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.FlopMessage.flop_card_1)
}

// optional .texas_code.protocol.Card flop_card_2 = 2;
inline bool FlopMessage::has_flop_card_2() const {
  return !_is_default_instance_ && flop_card_2_ != NULL;
}
inline void FlopMessage::clear_flop_card_2() {
  if (GetArenaNoVirtual() == NULL && flop_card_2_ != NULL) delete flop_card_2_;
  flop_card_2_ = NULL;
}
inline const ::texas_code::protocol::Card& FlopMessage::flop_card_2() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.FlopMessage.flop_card_2)
  return flop_card_2_ != NULL ? *flop_card_2_ : *default_instance_->flop_card_2_;
}
inline ::texas_code::protocol::Card* FlopMessage::mutable_flop_card_2() {
  
  if (flop_card_2_ == NULL) {
    flop_card_2_ = new ::texas_code::protocol::Card;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.FlopMessage.flop_card_2)
  return flop_card_2_;
}
inline ::texas_code::protocol::Card* FlopMessage::release_flop_card_2() {
  
  ::texas_code::protocol::Card* temp = flop_card_2_;
  flop_card_2_ = NULL;
  return temp;
}
inline void FlopMessage::set_allocated_flop_card_2(::texas_code::protocol::Card* flop_card_2) {
  delete flop_card_2_;
  flop_card_2_ = flop_card_2;
  if (flop_card_2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.FlopMessage.flop_card_2)
}

// optional .texas_code.protocol.Card flop_card_3 = 3;
inline bool FlopMessage::has_flop_card_3() const {
  return !_is_default_instance_ && flop_card_3_ != NULL;
}
inline void FlopMessage::clear_flop_card_3() {
  if (GetArenaNoVirtual() == NULL && flop_card_3_ != NULL) delete flop_card_3_;
  flop_card_3_ = NULL;
}
inline const ::texas_code::protocol::Card& FlopMessage::flop_card_3() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.FlopMessage.flop_card_3)
  return flop_card_3_ != NULL ? *flop_card_3_ : *default_instance_->flop_card_3_;
}
inline ::texas_code::protocol::Card* FlopMessage::mutable_flop_card_3() {
  
  if (flop_card_3_ == NULL) {
    flop_card_3_ = new ::texas_code::protocol::Card;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.FlopMessage.flop_card_3)
  return flop_card_3_;
}
inline ::texas_code::protocol::Card* FlopMessage::release_flop_card_3() {
  
  ::texas_code::protocol::Card* temp = flop_card_3_;
  flop_card_3_ = NULL;
  return temp;
}
inline void FlopMessage::set_allocated_flop_card_3(::texas_code::protocol::Card* flop_card_3) {
  delete flop_card_3_;
  flop_card_3_ = flop_card_3;
  if (flop_card_3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.FlopMessage.flop_card_3)
}

// -------------------------------------------------------------------

// TurnMessage

// optional .texas_code.protocol.Card turn_card = 1;
inline bool TurnMessage::has_turn_card() const {
  return !_is_default_instance_ && turn_card_ != NULL;
}
inline void TurnMessage::clear_turn_card() {
  if (GetArenaNoVirtual() == NULL && turn_card_ != NULL) delete turn_card_;
  turn_card_ = NULL;
}
inline const ::texas_code::protocol::Card& TurnMessage::turn_card() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.TurnMessage.turn_card)
  return turn_card_ != NULL ? *turn_card_ : *default_instance_->turn_card_;
}
inline ::texas_code::protocol::Card* TurnMessage::mutable_turn_card() {
  
  if (turn_card_ == NULL) {
    turn_card_ = new ::texas_code::protocol::Card;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.TurnMessage.turn_card)
  return turn_card_;
}
inline ::texas_code::protocol::Card* TurnMessage::release_turn_card() {
  
  ::texas_code::protocol::Card* temp = turn_card_;
  turn_card_ = NULL;
  return temp;
}
inline void TurnMessage::set_allocated_turn_card(::texas_code::protocol::Card* turn_card) {
  delete turn_card_;
  turn_card_ = turn_card;
  if (turn_card) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.TurnMessage.turn_card)
}

// -------------------------------------------------------------------

// RiverMessage

// optional .texas_code.protocol.Card river_card = 2;
inline bool RiverMessage::has_river_card() const {
  return !_is_default_instance_ && river_card_ != NULL;
}
inline void RiverMessage::clear_river_card() {
  if (GetArenaNoVirtual() == NULL && river_card_ != NULL) delete river_card_;
  river_card_ = NULL;
}
inline const ::texas_code::protocol::Card& RiverMessage::river_card() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.RiverMessage.river_card)
  return river_card_ != NULL ? *river_card_ : *default_instance_->river_card_;
}
inline ::texas_code::protocol::Card* RiverMessage::mutable_river_card() {
  
  if (river_card_ == NULL) {
    river_card_ = new ::texas_code::protocol::Card;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.RiverMessage.river_card)
  return river_card_;
}
inline ::texas_code::protocol::Card* RiverMessage::release_river_card() {
  
  ::texas_code::protocol::Card* temp = river_card_;
  river_card_ = NULL;
  return temp;
}
inline void RiverMessage::set_allocated_river_card(::texas_code::protocol::Card* river_card) {
  delete river_card_;
  river_card_ = river_card;
  if (river_card) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.RiverMessage.river_card)
}

// -------------------------------------------------------------------

// ShowDownMessage

// repeated .texas_code.protocol.Card public_cards = 1;
inline int ShowDownMessage::public_cards_size() const {
  return public_cards_.size();
}
inline void ShowDownMessage::clear_public_cards() {
  public_cards_.Clear();
}
inline const ::texas_code::protocol::Card& ShowDownMessage::public_cards(int index) const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ShowDownMessage.public_cards)
  return public_cards_.Get(index);
}
inline ::texas_code::protocol::Card* ShowDownMessage::mutable_public_cards(int index) {
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.ShowDownMessage.public_cards)
  return public_cards_.Mutable(index);
}
inline ::texas_code::protocol::Card* ShowDownMessage::add_public_cards() {
  // @@protoc_insertion_point(field_add:texas_code.protocol.ShowDownMessage.public_cards)
  return public_cards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Card >*
ShowDownMessage::mutable_public_cards() {
  // @@protoc_insertion_point(field_mutable_list:texas_code.protocol.ShowDownMessage.public_cards)
  return &public_cards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Card >&
ShowDownMessage::public_cards() const {
  // @@protoc_insertion_point(field_list:texas_code.protocol.ShowDownMessage.public_cards)
  return public_cards_;
}

// repeated .texas_code.protocol.PlayerHandInfo hand_infos = 2;
inline int ShowDownMessage::hand_infos_size() const {
  return hand_infos_.size();
}
inline void ShowDownMessage::clear_hand_infos() {
  hand_infos_.Clear();
}
inline const ::texas_code::protocol::PlayerHandInfo& ShowDownMessage::hand_infos(int index) const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ShowDownMessage.hand_infos)
  return hand_infos_.Get(index);
}
inline ::texas_code::protocol::PlayerHandInfo* ShowDownMessage::mutable_hand_infos(int index) {
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.ShowDownMessage.hand_infos)
  return hand_infos_.Mutable(index);
}
inline ::texas_code::protocol::PlayerHandInfo* ShowDownMessage::add_hand_infos() {
  // @@protoc_insertion_point(field_add:texas_code.protocol.ShowDownMessage.hand_infos)
  return hand_infos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::PlayerHandInfo >*
ShowDownMessage::mutable_hand_infos() {
  // @@protoc_insertion_point(field_mutable_list:texas_code.protocol.ShowDownMessage.hand_infos)
  return &hand_infos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::PlayerHandInfo >&
ShowDownMessage::hand_infos() const {
  // @@protoc_insertion_point(field_list:texas_code.protocol.ShowDownMessage.hand_infos)
  return hand_infos_;
}

// -------------------------------------------------------------------

// PotWinMessage

// repeated .texas_code.protocol.Player players = 1;
inline int PotWinMessage::players_size() const {
  return players_.size();
}
inline void PotWinMessage::clear_players() {
  players_.Clear();
}
inline const ::texas_code::protocol::Player& PotWinMessage::players(int index) const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.PotWinMessage.players)
  return players_.Get(index);
}
inline ::texas_code::protocol::Player* PotWinMessage::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.PotWinMessage.players)
  return players_.Mutable(index);
}
inline ::texas_code::protocol::Player* PotWinMessage::add_players() {
  // @@protoc_insertion_point(field_add:texas_code.protocol.PotWinMessage.players)
  return players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Player >*
PotWinMessage::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:texas_code.protocol.PotWinMessage.players)
  return &players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Player >&
PotWinMessage::players() const {
  // @@protoc_insertion_point(field_list:texas_code.protocol.PotWinMessage.players)
  return players_;
}

// repeated int64 pot_win = 2;
inline int PotWinMessage::pot_win_size() const {
  return pot_win_.size();
}
inline void PotWinMessage::clear_pot_win() {
  pot_win_.Clear();
}
inline ::google::protobuf::int64 PotWinMessage::pot_win(int index) const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.PotWinMessage.pot_win)
  return pot_win_.Get(index);
}
inline void PotWinMessage::set_pot_win(int index, ::google::protobuf::int64 value) {
  pot_win_.Set(index, value);
  // @@protoc_insertion_point(field_set:texas_code.protocol.PotWinMessage.pot_win)
}
inline void PotWinMessage::add_pot_win(::google::protobuf::int64 value) {
  pot_win_.Add(value);
  // @@protoc_insertion_point(field_add:texas_code.protocol.PotWinMessage.pot_win)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PotWinMessage::pot_win() const {
  // @@protoc_insertion_point(field_list:texas_code.protocol.PotWinMessage.pot_win)
  return pot_win_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PotWinMessage::mutable_pot_win() {
  // @@protoc_insertion_point(field_mutable_list:texas_code.protocol.PotWinMessage.pot_win)
  return &pot_win_;
}

// -------------------------------------------------------------------

// GameOverMessage

// optional int64 request_id = 1;
inline void GameOverMessage::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameOverMessage::request_id() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.GameOverMessage.request_id)
  return request_id_;
}
inline void GameOverMessage::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.GameOverMessage.request_id)
}

// -------------------------------------------------------------------

// Heartbeat

// optional int64 sequence_num = 1;
inline void Heartbeat::clear_sequence_num() {
  sequence_num_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Heartbeat::sequence_num() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.Heartbeat.sequence_num)
  return sequence_num_;
}
inline void Heartbeat::set_sequence_num(::google::protobuf::int64 value) {
  
  sequence_num_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.Heartbeat.sequence_num)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace texas_code

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
