// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace texas_code {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* ConnectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectSuccessResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectSuccessResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectFailedResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectFailedResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionSuccessResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionSuccessResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionFailedResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionFailedResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeatInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeatInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlindMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlindMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* HoldCardsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HoldCardsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* InquireActionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InquireActionMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlopMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlopMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RiverMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RiverMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShowDownMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShowDownMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PotWinMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PotWinMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameOverMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameOverMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Heartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Heartbeat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  ConnectRequest_descriptor_ = file->message_type(0);
  static const int ConnectRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, account_name_),
  };
  ConnectRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnectRequest_descriptor_,
      ConnectRequest::default_instance_,
      ConnectRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConnectRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, _is_default_instance_));
  ConnectSuccessResponse_descriptor_ = file->message_type(1);
  static const int ConnectSuccessResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectSuccessResponse, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectSuccessResponse, player_),
  };
  ConnectSuccessResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnectSuccessResponse_descriptor_,
      ConnectSuccessResponse::default_instance_,
      ConnectSuccessResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConnectSuccessResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectSuccessResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectSuccessResponse, _is_default_instance_));
  ConnectFailedResponse_descriptor_ = file->message_type(2);
  static const int ConnectFailedResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectFailedResponse, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectFailedResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectFailedResponse, error_msg_),
  };
  ConnectFailedResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnectFailedResponse_descriptor_,
      ConnectFailedResponse::default_instance_,
      ConnectFailedResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConnectFailedResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectFailedResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectFailedResponse, _is_default_instance_));
  ActionRequest_descriptor_ = file->message_type(3);
  static const int ActionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, jetton_action_),
  };
  ActionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionRequest_descriptor_,
      ActionRequest::default_instance_,
      ActionRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ActionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, _is_default_instance_));
  ActionSuccessResponse_descriptor_ = file->message_type(4);
  static const int ActionSuccessResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSuccessResponse, request_id_),
  };
  ActionSuccessResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionSuccessResponse_descriptor_,
      ActionSuccessResponse::default_instance_,
      ActionSuccessResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ActionSuccessResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSuccessResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSuccessResponse, _is_default_instance_));
  ActionFailedResponse_descriptor_ = file->message_type(5);
  static const int ActionFailedResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionFailedResponse, req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionFailedResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionFailedResponse, error_msg_),
  };
  ActionFailedResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionFailedResponse_descriptor_,
      ActionFailedResponse::default_instance_,
      ActionFailedResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ActionFailedResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionFailedResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionFailedResponse, _is_default_instance_));
  SeatInfoMessage_descriptor_ = file->message_type(6);
  static const int SeatInfoMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatInfoMessage, banker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatInfoMessage, s_blind_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatInfoMessage, b_blind_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatInfoMessage, other_players_),
  };
  SeatInfoMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SeatInfoMessage_descriptor_,
      SeatInfoMessage::default_instance_,
      SeatInfoMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(SeatInfoMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatInfoMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatInfoMessage, _is_default_instance_));
  BlindMessage_descriptor_ = file->message_type(7);
  static const int BlindMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlindMessage, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlindMessage, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlindMessage, bet_),
  };
  BlindMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlindMessage_descriptor_,
      BlindMessage::default_instance_,
      BlindMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(BlindMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlindMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlindMessage, _is_default_instance_));
  HoldCardsMessage_descriptor_ = file->message_type(8);
  static const int HoldCardsMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoldCardsMessage, card_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoldCardsMessage, card_2_),
  };
  HoldCardsMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HoldCardsMessage_descriptor_,
      HoldCardsMessage::default_instance_,
      HoldCardsMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(HoldCardsMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoldCardsMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoldCardsMessage, _is_default_instance_));
  InquireActionMessage_descriptor_ = file->message_type(9);
  static const int InquireActionMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InquireActionMessage, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InquireActionMessage, player_actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InquireActionMessage, pot_amount_),
  };
  InquireActionMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InquireActionMessage_descriptor_,
      InquireActionMessage::default_instance_,
      InquireActionMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(InquireActionMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InquireActionMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InquireActionMessage, _is_default_instance_));
  FlopMessage_descriptor_ = file->message_type(10);
  static const int FlopMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlopMessage, flop_card_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlopMessage, flop_card_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlopMessage, flop_card_3_),
  };
  FlopMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FlopMessage_descriptor_,
      FlopMessage::default_instance_,
      FlopMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(FlopMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlopMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlopMessage, _is_default_instance_));
  TurnMessage_descriptor_ = file->message_type(11);
  static const int TurnMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnMessage, turn_card_),
  };
  TurnMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TurnMessage_descriptor_,
      TurnMessage::default_instance_,
      TurnMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(TurnMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnMessage, _is_default_instance_));
  RiverMessage_descriptor_ = file->message_type(12);
  static const int RiverMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiverMessage, river_card_),
  };
  RiverMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RiverMessage_descriptor_,
      RiverMessage::default_instance_,
      RiverMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(RiverMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiverMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiverMessage, _is_default_instance_));
  ShowDownMessage_descriptor_ = file->message_type(13);
  static const int ShowDownMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowDownMessage, public_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowDownMessage, hand_infos_),
  };
  ShowDownMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ShowDownMessage_descriptor_,
      ShowDownMessage::default_instance_,
      ShowDownMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(ShowDownMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowDownMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowDownMessage, _is_default_instance_));
  PotWinMessage_descriptor_ = file->message_type(14);
  static const int PotWinMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PotWinMessage, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PotWinMessage, pot_win_),
  };
  PotWinMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PotWinMessage_descriptor_,
      PotWinMessage::default_instance_,
      PotWinMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(PotWinMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PotWinMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PotWinMessage, _is_default_instance_));
  GameOverMessage_descriptor_ = file->message_type(15);
  static const int GameOverMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverMessage, request_id_),
  };
  GameOverMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameOverMessage_descriptor_,
      GameOverMessage::default_instance_,
      GameOverMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameOverMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverMessage, _is_default_instance_));
  Heartbeat_descriptor_ = file->message_type(16);
  static const int Heartbeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, sequence_num_),
  };
  Heartbeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Heartbeat_descriptor_,
      Heartbeat::default_instance_,
      Heartbeat_offsets_,
      -1,
      -1,
      -1,
      sizeof(Heartbeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnectRequest_descriptor_, &ConnectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnectSuccessResponse_descriptor_, &ConnectSuccessResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnectFailedResponse_descriptor_, &ConnectFailedResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionRequest_descriptor_, &ActionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionSuccessResponse_descriptor_, &ActionSuccessResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionFailedResponse_descriptor_, &ActionFailedResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SeatInfoMessage_descriptor_, &SeatInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlindMessage_descriptor_, &BlindMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HoldCardsMessage_descriptor_, &HoldCardsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InquireActionMessage_descriptor_, &InquireActionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FlopMessage_descriptor_, &FlopMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TurnMessage_descriptor_, &TurnMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RiverMessage_descriptor_, &RiverMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ShowDownMessage_descriptor_, &ShowDownMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PotWinMessage_descriptor_, &PotWinMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameOverMessage_descriptor_, &GameOverMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Heartbeat_descriptor_, &Heartbeat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete ConnectRequest::default_instance_;
  delete ConnectRequest_reflection_;
  delete ConnectSuccessResponse::default_instance_;
  delete ConnectSuccessResponse_reflection_;
  delete ConnectFailedResponse::default_instance_;
  delete ConnectFailedResponse_reflection_;
  delete ActionRequest::default_instance_;
  delete ActionRequest_reflection_;
  delete ActionSuccessResponse::default_instance_;
  delete ActionSuccessResponse_reflection_;
  delete ActionFailedResponse::default_instance_;
  delete ActionFailedResponse_reflection_;
  delete SeatInfoMessage::default_instance_;
  delete SeatInfoMessage_reflection_;
  delete BlindMessage::default_instance_;
  delete BlindMessage_reflection_;
  delete HoldCardsMessage::default_instance_;
  delete HoldCardsMessage_reflection_;
  delete InquireActionMessage::default_instance_;
  delete InquireActionMessage_reflection_;
  delete FlopMessage::default_instance_;
  delete FlopMessage_reflection_;
  delete TurnMessage::default_instance_;
  delete TurnMessage_reflection_;
  delete RiverMessage::default_instance_;
  delete RiverMessage_reflection_;
  delete ShowDownMessage::default_instance_;
  delete ShowDownMessage_reflection_;
  delete PotWinMessage::default_instance_;
  delete PotWinMessage_reflection_;
  delete GameOverMessage::default_instance_;
  delete GameOverMessage_reflection_;
  delete Heartbeat::default_instance_;
  delete Heartbeat_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::texas_code::protocol::protobuf_AddDesc_definition_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\023texas_code.protocol\032\020de"
    "finition.proto\":\n\016ConnectRequest\022\022\n\nrequ"
    "est_id\030\001 \001(\003\022\024\n\014account_name\030\002 \001(\t\"Y\n\026Co"
    "nnectSuccessResponse\022\022\n\nrequest_id\030\001 \001(\003"
    "\022+\n\006player\030\002 \001(\0132\033.texas_code.protocol.P"
    "layer\"R\n\025ConnectFailedResponse\022\022\n\nreques"
    "t_id\030\001 \001(\003\022\022\n\nerror_code\030\002 \001(\005\022\021\n\terror_"
    "msg\030\003 \001(\t\"]\n\rActionRequest\022\022\n\nrequest_id"
    "\030\001 \001(\003\0228\n\rjetton_action\030\002 \001(\0132!.texas_co"
    "de.protocol.JettonAction\"+\n\025ActionSucces"
    "sResponse\022\022\n\nrequest_id\030\001 \001(\003\"M\n\024ActionF"
    "ailedResponse\022\016\n\006req_id\030\001 \001(\003\022\022\n\nerror_c"
    "ode\030\002 \001(\005\022\021\n\terror_msg\030\003 \001(\t\"\334\001\n\017SeatInf"
    "oMessage\022+\n\006banker\030\001 \001(\0132\033.texas_code.pr"
    "otocol.Player\0223\n\016s_blind_player\030\002 \001(\0132\033."
    "texas_code.protocol.Player\0223\n\016b_blind_pl"
    "ayer\030\003 \001(\0132\033.texas_code.protocol.Player\022"
    "2\n\rother_players\030\004 \003(\0132\033.texas_code.prot"
    "ocol.Player\"\\\n\014BlindMessage\022\022\n\nrequest_i"
    "d\030\001 \001(\005\022+\n\006player\030\002 \001(\0132\033.texas_code.pro"
    "tocol.Player\022\013\n\003bet\030\003 \001(\003\"h\n\020HoldCardsMe"
    "ssage\022)\n\006card_1\030\001 \001(\0132\031.texas_code.proto"
    "col.Card\022)\n\006card_2\030\002 \001(\0132\031.texas_code.pr"
    "otocol.Card\"y\n\024InquireActionMessage\022\022\n\nr"
    "equest_id\030\001 \001(\003\0229\n\016player_actions\030\002 \003(\0132"
    "!.texas_code.protocol.PlayerAction\022\022\n\npo"
    "t_amount\030\003 \001(\003\"\235\001\n\013FlopMessage\022.\n\013flop_c"
    "ard_1\030\001 \001(\0132\031.texas_code.protocol.Card\022."
    "\n\013flop_card_2\030\002 \001(\0132\031.texas_code.protoco"
    "l.Card\022.\n\013flop_card_3\030\003 \001(\0132\031.texas_code"
    ".protocol.Card\";\n\013TurnMessage\022,\n\tturn_ca"
    "rd\030\001 \001(\0132\031.texas_code.protocol.Card\"=\n\014R"
    "iverMessage\022-\n\nriver_card\030\002 \001(\0132\031.texas_"
    "code.protocol.Card\"{\n\017ShowDownMessage\022/\n"
    "\014public_cards\030\001 \003(\0132\031.texas_code.protoco"
    "l.Card\0227\n\nhand_infos\030\002 \003(\0132#.texas_code."
    "protocol.PlayerHandInfo\"N\n\rPotWinMessage"
    "\022,\n\007players\030\001 \003(\0132\033.texas_code.protocol."
    "Player\022\017\n\007pot_win\030\002 \003(\003\"%\n\017GameOverMessa"
    "ge\022\022\n\nrequest_id\030\001 \001(\003\"!\n\tHeartbeat\022\024\n\014s"
    "equence_num\030\001 \001(\003b\006proto3", 1625);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  ConnectRequest::default_instance_ = new ConnectRequest();
  ConnectSuccessResponse::default_instance_ = new ConnectSuccessResponse();
  ConnectFailedResponse::default_instance_ = new ConnectFailedResponse();
  ActionRequest::default_instance_ = new ActionRequest();
  ActionSuccessResponse::default_instance_ = new ActionSuccessResponse();
  ActionFailedResponse::default_instance_ = new ActionFailedResponse();
  SeatInfoMessage::default_instance_ = new SeatInfoMessage();
  BlindMessage::default_instance_ = new BlindMessage();
  HoldCardsMessage::default_instance_ = new HoldCardsMessage();
  InquireActionMessage::default_instance_ = new InquireActionMessage();
  FlopMessage::default_instance_ = new FlopMessage();
  TurnMessage::default_instance_ = new TurnMessage();
  RiverMessage::default_instance_ = new RiverMessage();
  ShowDownMessage::default_instance_ = new ShowDownMessage();
  PotWinMessage::default_instance_ = new PotWinMessage();
  GameOverMessage::default_instance_ = new GameOverMessage();
  Heartbeat::default_instance_ = new Heartbeat();
  ConnectRequest::default_instance_->InitAsDefaultInstance();
  ConnectSuccessResponse::default_instance_->InitAsDefaultInstance();
  ConnectFailedResponse::default_instance_->InitAsDefaultInstance();
  ActionRequest::default_instance_->InitAsDefaultInstance();
  ActionSuccessResponse::default_instance_->InitAsDefaultInstance();
  ActionFailedResponse::default_instance_->InitAsDefaultInstance();
  SeatInfoMessage::default_instance_->InitAsDefaultInstance();
  BlindMessage::default_instance_->InitAsDefaultInstance();
  HoldCardsMessage::default_instance_->InitAsDefaultInstance();
  InquireActionMessage::default_instance_->InitAsDefaultInstance();
  FlopMessage::default_instance_->InitAsDefaultInstance();
  TurnMessage::default_instance_->InitAsDefaultInstance();
  RiverMessage::default_instance_->InitAsDefaultInstance();
  ShowDownMessage::default_instance_->InitAsDefaultInstance();
  PotWinMessage::default_instance_->InitAsDefaultInstance();
  GameOverMessage::default_instance_->InitAsDefaultInstance();
  Heartbeat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectRequest::kRequestIdFieldNumber;
const int ConnectRequest::kAccountNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectRequest::ConnectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.ConnectRequest)
}

void ConnectRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ConnectRequest::ConnectRequest(const ConnectRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.ConnectRequest)
}

void ConnectRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_ = GOOGLE_LONGLONG(0);
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ConnectRequest::~ConnectRequest() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.ConnectRequest)
  SharedDtor();
}

void ConnectRequest::SharedDtor() {
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ConnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectRequest_descriptor_;
}

const ConnectRequest& ConnectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ConnectRequest* ConnectRequest::default_instance_ = NULL;

ConnectRequest* ConnectRequest::New(::google::protobuf::Arena* arena) const {
  ConnectRequest* n = new ConnectRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectRequest::Clear() {
  request_id_ = GOOGLE_LONGLONG(0);
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.ConnectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account_name;
        break;
      }

      // optional string account_name = 2;
      case 2: {
        if (tag == 18) {
         parse_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "texas_code.protocol.ConnectRequest.account_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.ConnectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.ConnectRequest)
  return false;
#undef DO_
}

void ConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.ConnectRequest)
  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->request_id(), output);
  }

  // optional string account_name = 2;
  if (this->account_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "texas_code.protocol.ConnectRequest.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.ConnectRequest)
}

::google::protobuf::uint8* ConnectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.ConnectRequest)
  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->request_id(), target);
  }

  // optional string account_name = 2;
  if (this->account_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "texas_code.protocol.ConnectRequest.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.ConnectRequest)
  return target;
}

int ConnectRequest::ByteSize() const {
  int total_size = 0;

  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  // optional string account_name = 2;
  if (this->account_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConnectRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectRequest::MergeFrom(const ConnectRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.account_name().size() > 0) {

    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
}

void ConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRequest::CopyFrom(const ConnectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRequest::IsInitialized() const {

  return true;
}

void ConnectRequest::Swap(ConnectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectRequest::InternalSwap(ConnectRequest* other) {
  std::swap(request_id_, other->request_id_);
  account_name_.Swap(&other->account_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectRequest_descriptor_;
  metadata.reflection = ConnectRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectRequest

// optional int64 request_id = 1;
void ConnectRequest::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ConnectRequest::request_id() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ConnectRequest.request_id)
  return request_id_;
}
 void ConnectRequest::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.ConnectRequest.request_id)
}

// optional string account_name = 2;
void ConnectRequest::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ConnectRequest::account_name() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ConnectRequest.account_name)
  return account_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectRequest::set_account_name(const ::std::string& value) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:texas_code.protocol.ConnectRequest.account_name)
}
 void ConnectRequest::set_account_name(const char* value) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:texas_code.protocol.ConnectRequest.account_name)
}
 void ConnectRequest::set_account_name(const char* value, size_t size) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:texas_code.protocol.ConnectRequest.account_name)
}
 ::std::string* ConnectRequest::mutable_account_name() {
  
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.ConnectRequest.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectRequest::release_account_name() {
  
  return account_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectRequest::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    
  } else {
    
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.ConnectRequest.account_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectSuccessResponse::kRequestIdFieldNumber;
const int ConnectSuccessResponse::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectSuccessResponse::ConnectSuccessResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.ConnectSuccessResponse)
}

void ConnectSuccessResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  player_ = const_cast< ::texas_code::protocol::Player*>(&::texas_code::protocol::Player::default_instance());
}

ConnectSuccessResponse::ConnectSuccessResponse(const ConnectSuccessResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.ConnectSuccessResponse)
}

void ConnectSuccessResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  request_id_ = GOOGLE_LONGLONG(0);
  player_ = NULL;
}

ConnectSuccessResponse::~ConnectSuccessResponse() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.ConnectSuccessResponse)
  SharedDtor();
}

void ConnectSuccessResponse::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void ConnectSuccessResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectSuccessResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectSuccessResponse_descriptor_;
}

const ConnectSuccessResponse& ConnectSuccessResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ConnectSuccessResponse* ConnectSuccessResponse::default_instance_ = NULL;

ConnectSuccessResponse* ConnectSuccessResponse::New(::google::protobuf::Arena* arena) const {
  ConnectSuccessResponse* n = new ConnectSuccessResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectSuccessResponse::Clear() {
  request_id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}

bool ConnectSuccessResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.ConnectSuccessResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }

      // optional .texas_code.protocol.Player player = 2;
      case 2: {
        if (tag == 18) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.ConnectSuccessResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.ConnectSuccessResponse)
  return false;
#undef DO_
}

void ConnectSuccessResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.ConnectSuccessResponse)
  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->request_id(), output);
  }

  // optional .texas_code.protocol.Player player = 2;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->player_, output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.ConnectSuccessResponse)
}

::google::protobuf::uint8* ConnectSuccessResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.ConnectSuccessResponse)
  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->request_id(), target);
  }

  // optional .texas_code.protocol.Player player = 2;
  if (this->has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->player_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.ConnectSuccessResponse)
  return target;
}

int ConnectSuccessResponse::ByteSize() const {
  int total_size = 0;

  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  // optional .texas_code.protocol.Player player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectSuccessResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConnectSuccessResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectSuccessResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectSuccessResponse::MergeFrom(const ConnectSuccessResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.has_player()) {
    mutable_player()->::texas_code::protocol::Player::MergeFrom(from.player());
  }
}

void ConnectSuccessResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectSuccessResponse::CopyFrom(const ConnectSuccessResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectSuccessResponse::IsInitialized() const {

  return true;
}

void ConnectSuccessResponse::Swap(ConnectSuccessResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectSuccessResponse::InternalSwap(ConnectSuccessResponse* other) {
  std::swap(request_id_, other->request_id_);
  std::swap(player_, other->player_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectSuccessResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectSuccessResponse_descriptor_;
  metadata.reflection = ConnectSuccessResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectSuccessResponse

// optional int64 request_id = 1;
void ConnectSuccessResponse::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ConnectSuccessResponse::request_id() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ConnectSuccessResponse.request_id)
  return request_id_;
}
 void ConnectSuccessResponse::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.ConnectSuccessResponse.request_id)
}

// optional .texas_code.protocol.Player player = 2;
bool ConnectSuccessResponse::has_player() const {
  return !_is_default_instance_ && player_ != NULL;
}
void ConnectSuccessResponse::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
const ::texas_code::protocol::Player& ConnectSuccessResponse::player() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ConnectSuccessResponse.player)
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
::texas_code::protocol::Player* ConnectSuccessResponse::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::texas_code::protocol::Player;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.ConnectSuccessResponse.player)
  return player_;
}
::texas_code::protocol::Player* ConnectSuccessResponse::release_player() {
  
  ::texas_code::protocol::Player* temp = player_;
  player_ = NULL;
  return temp;
}
void ConnectSuccessResponse::set_allocated_player(::texas_code::protocol::Player* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.ConnectSuccessResponse.player)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectFailedResponse::kRequestIdFieldNumber;
const int ConnectFailedResponse::kErrorCodeFieldNumber;
const int ConnectFailedResponse::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectFailedResponse::ConnectFailedResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.ConnectFailedResponse)
}

void ConnectFailedResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ConnectFailedResponse::ConnectFailedResponse(const ConnectFailedResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.ConnectFailedResponse)
}

void ConnectFailedResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_ = GOOGLE_LONGLONG(0);
  error_code_ = 0;
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ConnectFailedResponse::~ConnectFailedResponse() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.ConnectFailedResponse)
  SharedDtor();
}

void ConnectFailedResponse::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ConnectFailedResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectFailedResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectFailedResponse_descriptor_;
}

const ConnectFailedResponse& ConnectFailedResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ConnectFailedResponse* ConnectFailedResponse::default_instance_ = NULL;

ConnectFailedResponse* ConnectFailedResponse::New(::google::protobuf::Arena* arena) const {
  ConnectFailedResponse* n = new ConnectFailedResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectFailedResponse::Clear() {
  request_id_ = GOOGLE_LONGLONG(0);
  error_code_ = 0;
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ConnectFailedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.ConnectFailedResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 2;
      case 2: {
        if (tag == 16) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "texas_code.protocol.ConnectFailedResponse.error_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.ConnectFailedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.ConnectFailedResponse)
  return false;
#undef DO_
}

void ConnectFailedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.ConnectFailedResponse)
  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->request_id(), output);
  }

  // optional int32 error_code = 2;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "texas_code.protocol.ConnectFailedResponse.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.ConnectFailedResponse)
}

::google::protobuf::uint8* ConnectFailedResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.ConnectFailedResponse)
  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->request_id(), target);
  }

  // optional int32 error_code = 2;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "texas_code.protocol.ConnectFailedResponse.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.ConnectFailedResponse)
  return target;
}

int ConnectFailedResponse::ByteSize() const {
  int total_size = 0;

  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  // optional int32 error_code = 2;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectFailedResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConnectFailedResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectFailedResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectFailedResponse::MergeFrom(const ConnectFailedResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
}

void ConnectFailedResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectFailedResponse::CopyFrom(const ConnectFailedResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectFailedResponse::IsInitialized() const {

  return true;
}

void ConnectFailedResponse::Swap(ConnectFailedResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectFailedResponse::InternalSwap(ConnectFailedResponse* other) {
  std::swap(request_id_, other->request_id_);
  std::swap(error_code_, other->error_code_);
  error_msg_.Swap(&other->error_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectFailedResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectFailedResponse_descriptor_;
  metadata.reflection = ConnectFailedResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectFailedResponse

// optional int64 request_id = 1;
void ConnectFailedResponse::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ConnectFailedResponse::request_id() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ConnectFailedResponse.request_id)
  return request_id_;
}
 void ConnectFailedResponse::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.ConnectFailedResponse.request_id)
}

// optional int32 error_code = 2;
void ConnectFailedResponse::clear_error_code() {
  error_code_ = 0;
}
 ::google::protobuf::int32 ConnectFailedResponse::error_code() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ConnectFailedResponse.error_code)
  return error_code_;
}
 void ConnectFailedResponse::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.ConnectFailedResponse.error_code)
}

// optional string error_msg = 3;
void ConnectFailedResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ConnectFailedResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ConnectFailedResponse.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectFailedResponse::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:texas_code.protocol.ConnectFailedResponse.error_msg)
}
 void ConnectFailedResponse::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:texas_code.protocol.ConnectFailedResponse.error_msg)
}
 void ConnectFailedResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:texas_code.protocol.ConnectFailedResponse.error_msg)
}
 ::std::string* ConnectFailedResponse::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.ConnectFailedResponse.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectFailedResponse::release_error_msg() {
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectFailedResponse::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.ConnectFailedResponse.error_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionRequest::kRequestIdFieldNumber;
const int ActionRequest::kJettonActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionRequest::ActionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.ActionRequest)
}

void ActionRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  jetton_action_ = const_cast< ::texas_code::protocol::JettonAction*>(&::texas_code::protocol::JettonAction::default_instance());
}

ActionRequest::ActionRequest(const ActionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.ActionRequest)
}

void ActionRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  request_id_ = GOOGLE_LONGLONG(0);
  jetton_action_ = NULL;
}

ActionRequest::~ActionRequest() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.ActionRequest)
  SharedDtor();
}

void ActionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete jetton_action_;
  }
}

void ActionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionRequest_descriptor_;
}

const ActionRequest& ActionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ActionRequest* ActionRequest::default_instance_ = NULL;

ActionRequest* ActionRequest::New(::google::protobuf::Arena* arena) const {
  ActionRequest* n = new ActionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionRequest::Clear() {
  request_id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && jetton_action_ != NULL) delete jetton_action_;
  jetton_action_ = NULL;
}

bool ActionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.ActionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_jetton_action;
        break;
      }

      // optional .texas_code.protocol.JettonAction jetton_action = 2;
      case 2: {
        if (tag == 18) {
         parse_jetton_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jetton_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.ActionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.ActionRequest)
  return false;
#undef DO_
}

void ActionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.ActionRequest)
  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->request_id(), output);
  }

  // optional .texas_code.protocol.JettonAction jetton_action = 2;
  if (this->has_jetton_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->jetton_action_, output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.ActionRequest)
}

::google::protobuf::uint8* ActionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.ActionRequest)
  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->request_id(), target);
  }

  // optional .texas_code.protocol.JettonAction jetton_action = 2;
  if (this->has_jetton_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->jetton_action_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.ActionRequest)
  return target;
}

int ActionRequest::ByteSize() const {
  int total_size = 0;

  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  // optional .texas_code.protocol.JettonAction jetton_action = 2;
  if (this->has_jetton_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->jetton_action_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActionRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionRequest::MergeFrom(const ActionRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.has_jetton_action()) {
    mutable_jetton_action()->::texas_code::protocol::JettonAction::MergeFrom(from.jetton_action());
  }
}

void ActionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionRequest::CopyFrom(const ActionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionRequest::IsInitialized() const {

  return true;
}

void ActionRequest::Swap(ActionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionRequest::InternalSwap(ActionRequest* other) {
  std::swap(request_id_, other->request_id_);
  std::swap(jetton_action_, other->jetton_action_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionRequest_descriptor_;
  metadata.reflection = ActionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionRequest

// optional int64 request_id = 1;
void ActionRequest::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ActionRequest::request_id() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ActionRequest.request_id)
  return request_id_;
}
 void ActionRequest::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.ActionRequest.request_id)
}

// optional .texas_code.protocol.JettonAction jetton_action = 2;
bool ActionRequest::has_jetton_action() const {
  return !_is_default_instance_ && jetton_action_ != NULL;
}
void ActionRequest::clear_jetton_action() {
  if (GetArenaNoVirtual() == NULL && jetton_action_ != NULL) delete jetton_action_;
  jetton_action_ = NULL;
}
const ::texas_code::protocol::JettonAction& ActionRequest::jetton_action() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ActionRequest.jetton_action)
  return jetton_action_ != NULL ? *jetton_action_ : *default_instance_->jetton_action_;
}
::texas_code::protocol::JettonAction* ActionRequest::mutable_jetton_action() {
  
  if (jetton_action_ == NULL) {
    jetton_action_ = new ::texas_code::protocol::JettonAction;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.ActionRequest.jetton_action)
  return jetton_action_;
}
::texas_code::protocol::JettonAction* ActionRequest::release_jetton_action() {
  
  ::texas_code::protocol::JettonAction* temp = jetton_action_;
  jetton_action_ = NULL;
  return temp;
}
void ActionRequest::set_allocated_jetton_action(::texas_code::protocol::JettonAction* jetton_action) {
  delete jetton_action_;
  jetton_action_ = jetton_action;
  if (jetton_action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.ActionRequest.jetton_action)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionSuccessResponse::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionSuccessResponse::ActionSuccessResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.ActionSuccessResponse)
}

void ActionSuccessResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ActionSuccessResponse::ActionSuccessResponse(const ActionSuccessResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.ActionSuccessResponse)
}

void ActionSuccessResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  request_id_ = GOOGLE_LONGLONG(0);
}

ActionSuccessResponse::~ActionSuccessResponse() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.ActionSuccessResponse)
  SharedDtor();
}

void ActionSuccessResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionSuccessResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionSuccessResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionSuccessResponse_descriptor_;
}

const ActionSuccessResponse& ActionSuccessResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ActionSuccessResponse* ActionSuccessResponse::default_instance_ = NULL;

ActionSuccessResponse* ActionSuccessResponse::New(::google::protobuf::Arena* arena) const {
  ActionSuccessResponse* n = new ActionSuccessResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionSuccessResponse::Clear() {
  request_id_ = GOOGLE_LONGLONG(0);
}

bool ActionSuccessResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.ActionSuccessResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.ActionSuccessResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.ActionSuccessResponse)
  return false;
#undef DO_
}

void ActionSuccessResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.ActionSuccessResponse)
  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->request_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.ActionSuccessResponse)
}

::google::protobuf::uint8* ActionSuccessResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.ActionSuccessResponse)
  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->request_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.ActionSuccessResponse)
  return target;
}

int ActionSuccessResponse::ByteSize() const {
  int total_size = 0;

  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionSuccessResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActionSuccessResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionSuccessResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionSuccessResponse::MergeFrom(const ActionSuccessResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
}

void ActionSuccessResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSuccessResponse::CopyFrom(const ActionSuccessResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSuccessResponse::IsInitialized() const {

  return true;
}

void ActionSuccessResponse::Swap(ActionSuccessResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionSuccessResponse::InternalSwap(ActionSuccessResponse* other) {
  std::swap(request_id_, other->request_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionSuccessResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionSuccessResponse_descriptor_;
  metadata.reflection = ActionSuccessResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionSuccessResponse

// optional int64 request_id = 1;
void ActionSuccessResponse::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ActionSuccessResponse::request_id() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ActionSuccessResponse.request_id)
  return request_id_;
}
 void ActionSuccessResponse::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.ActionSuccessResponse.request_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionFailedResponse::kReqIdFieldNumber;
const int ActionFailedResponse::kErrorCodeFieldNumber;
const int ActionFailedResponse::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionFailedResponse::ActionFailedResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.ActionFailedResponse)
}

void ActionFailedResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ActionFailedResponse::ActionFailedResponse(const ActionFailedResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.ActionFailedResponse)
}

void ActionFailedResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  req_id_ = GOOGLE_LONGLONG(0);
  error_code_ = 0;
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ActionFailedResponse::~ActionFailedResponse() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.ActionFailedResponse)
  SharedDtor();
}

void ActionFailedResponse::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ActionFailedResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionFailedResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionFailedResponse_descriptor_;
}

const ActionFailedResponse& ActionFailedResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ActionFailedResponse* ActionFailedResponse::default_instance_ = NULL;

ActionFailedResponse* ActionFailedResponse::New(::google::protobuf::Arena* arena) const {
  ActionFailedResponse* n = new ActionFailedResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionFailedResponse::Clear() {
  req_id_ = GOOGLE_LONGLONG(0);
  error_code_ = 0;
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ActionFailedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.ActionFailedResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 req_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &req_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 2;
      case 2: {
        if (tag == 16) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "texas_code.protocol.ActionFailedResponse.error_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.ActionFailedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.ActionFailedResponse)
  return false;
#undef DO_
}

void ActionFailedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.ActionFailedResponse)
  // optional int64 req_id = 1;
  if (this->req_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->req_id(), output);
  }

  // optional int32 error_code = 2;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "texas_code.protocol.ActionFailedResponse.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.ActionFailedResponse)
}

::google::protobuf::uint8* ActionFailedResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.ActionFailedResponse)
  // optional int64 req_id = 1;
  if (this->req_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->req_id(), target);
  }

  // optional int32 error_code = 2;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "texas_code.protocol.ActionFailedResponse.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.ActionFailedResponse)
  return target;
}

int ActionFailedResponse::ByteSize() const {
  int total_size = 0;

  // optional int64 req_id = 1;
  if (this->req_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->req_id());
  }

  // optional int32 error_code = 2;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionFailedResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActionFailedResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionFailedResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionFailedResponse::MergeFrom(const ActionFailedResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.req_id() != 0) {
    set_req_id(from.req_id());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
}

void ActionFailedResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionFailedResponse::CopyFrom(const ActionFailedResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionFailedResponse::IsInitialized() const {

  return true;
}

void ActionFailedResponse::Swap(ActionFailedResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionFailedResponse::InternalSwap(ActionFailedResponse* other) {
  std::swap(req_id_, other->req_id_);
  std::swap(error_code_, other->error_code_);
  error_msg_.Swap(&other->error_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionFailedResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionFailedResponse_descriptor_;
  metadata.reflection = ActionFailedResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionFailedResponse

// optional int64 req_id = 1;
void ActionFailedResponse::clear_req_id() {
  req_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ActionFailedResponse::req_id() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ActionFailedResponse.req_id)
  return req_id_;
}
 void ActionFailedResponse::set_req_id(::google::protobuf::int64 value) {
  
  req_id_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.ActionFailedResponse.req_id)
}

// optional int32 error_code = 2;
void ActionFailedResponse::clear_error_code() {
  error_code_ = 0;
}
 ::google::protobuf::int32 ActionFailedResponse::error_code() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ActionFailedResponse.error_code)
  return error_code_;
}
 void ActionFailedResponse::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.ActionFailedResponse.error_code)
}

// optional string error_msg = 3;
void ActionFailedResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ActionFailedResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ActionFailedResponse.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ActionFailedResponse::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:texas_code.protocol.ActionFailedResponse.error_msg)
}
 void ActionFailedResponse::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:texas_code.protocol.ActionFailedResponse.error_msg)
}
 void ActionFailedResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:texas_code.protocol.ActionFailedResponse.error_msg)
}
 ::std::string* ActionFailedResponse::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.ActionFailedResponse.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ActionFailedResponse::release_error_msg() {
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ActionFailedResponse::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.ActionFailedResponse.error_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeatInfoMessage::kBankerFieldNumber;
const int SeatInfoMessage::kSBlindPlayerFieldNumber;
const int SeatInfoMessage::kBBlindPlayerFieldNumber;
const int SeatInfoMessage::kOtherPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeatInfoMessage::SeatInfoMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.SeatInfoMessage)
}

void SeatInfoMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  banker_ = const_cast< ::texas_code::protocol::Player*>(&::texas_code::protocol::Player::default_instance());
  s_blind_player_ = const_cast< ::texas_code::protocol::Player*>(&::texas_code::protocol::Player::default_instance());
  b_blind_player_ = const_cast< ::texas_code::protocol::Player*>(&::texas_code::protocol::Player::default_instance());
}

SeatInfoMessage::SeatInfoMessage(const SeatInfoMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.SeatInfoMessage)
}

void SeatInfoMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  banker_ = NULL;
  s_blind_player_ = NULL;
  b_blind_player_ = NULL;
}

SeatInfoMessage::~SeatInfoMessage() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.SeatInfoMessage)
  SharedDtor();
}

void SeatInfoMessage::SharedDtor() {
  if (this != default_instance_) {
    delete banker_;
    delete s_blind_player_;
    delete b_blind_player_;
  }
}

void SeatInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeatInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeatInfoMessage_descriptor_;
}

const SeatInfoMessage& SeatInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

SeatInfoMessage* SeatInfoMessage::default_instance_ = NULL;

SeatInfoMessage* SeatInfoMessage::New(::google::protobuf::Arena* arena) const {
  SeatInfoMessage* n = new SeatInfoMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeatInfoMessage::Clear() {
  if (GetArenaNoVirtual() == NULL && banker_ != NULL) delete banker_;
  banker_ = NULL;
  if (GetArenaNoVirtual() == NULL && s_blind_player_ != NULL) delete s_blind_player_;
  s_blind_player_ = NULL;
  if (GetArenaNoVirtual() == NULL && b_blind_player_ != NULL) delete b_blind_player_;
  b_blind_player_ = NULL;
  other_players_.Clear();
}

bool SeatInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.SeatInfoMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .texas_code.protocol.Player banker = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_s_blind_player;
        break;
      }

      // optional .texas_code.protocol.Player s_blind_player = 2;
      case 2: {
        if (tag == 18) {
         parse_s_blind_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s_blind_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_b_blind_player;
        break;
      }

      // optional .texas_code.protocol.Player b_blind_player = 3;
      case 3: {
        if (tag == 26) {
         parse_b_blind_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_b_blind_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_other_players;
        break;
      }

      // repeated .texas_code.protocol.Player other_players = 4;
      case 4: {
        if (tag == 34) {
         parse_other_players:
          DO_(input->IncrementRecursionDepth());
         parse_loop_other_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_other_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_other_players;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.SeatInfoMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.SeatInfoMessage)
  return false;
#undef DO_
}

void SeatInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.SeatInfoMessage)
  // optional .texas_code.protocol.Player banker = 1;
  if (this->has_banker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->banker_, output);
  }

  // optional .texas_code.protocol.Player s_blind_player = 2;
  if (this->has_s_blind_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->s_blind_player_, output);
  }

  // optional .texas_code.protocol.Player b_blind_player = 3;
  if (this->has_b_blind_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->b_blind_player_, output);
  }

  // repeated .texas_code.protocol.Player other_players = 4;
  for (unsigned int i = 0, n = this->other_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->other_players(i), output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.SeatInfoMessage)
}

::google::protobuf::uint8* SeatInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.SeatInfoMessage)
  // optional .texas_code.protocol.Player banker = 1;
  if (this->has_banker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->banker_, target);
  }

  // optional .texas_code.protocol.Player s_blind_player = 2;
  if (this->has_s_blind_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->s_blind_player_, target);
  }

  // optional .texas_code.protocol.Player b_blind_player = 3;
  if (this->has_b_blind_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->b_blind_player_, target);
  }

  // repeated .texas_code.protocol.Player other_players = 4;
  for (unsigned int i = 0, n = this->other_players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->other_players(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.SeatInfoMessage)
  return target;
}

int SeatInfoMessage::ByteSize() const {
  int total_size = 0;

  // optional .texas_code.protocol.Player banker = 1;
  if (this->has_banker()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->banker_);
  }

  // optional .texas_code.protocol.Player s_blind_player = 2;
  if (this->has_s_blind_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->s_blind_player_);
  }

  // optional .texas_code.protocol.Player b_blind_player = 3;
  if (this->has_b_blind_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->b_blind_player_);
  }

  // repeated .texas_code.protocol.Player other_players = 4;
  total_size += 1 * this->other_players_size();
  for (int i = 0; i < this->other_players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->other_players(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeatInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SeatInfoMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SeatInfoMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeatInfoMessage::MergeFrom(const SeatInfoMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  other_players_.MergeFrom(from.other_players_);
  if (from.has_banker()) {
    mutable_banker()->::texas_code::protocol::Player::MergeFrom(from.banker());
  }
  if (from.has_s_blind_player()) {
    mutable_s_blind_player()->::texas_code::protocol::Player::MergeFrom(from.s_blind_player());
  }
  if (from.has_b_blind_player()) {
    mutable_b_blind_player()->::texas_code::protocol::Player::MergeFrom(from.b_blind_player());
  }
}

void SeatInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeatInfoMessage::CopyFrom(const SeatInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatInfoMessage::IsInitialized() const {

  return true;
}

void SeatInfoMessage::Swap(SeatInfoMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeatInfoMessage::InternalSwap(SeatInfoMessage* other) {
  std::swap(banker_, other->banker_);
  std::swap(s_blind_player_, other->s_blind_player_);
  std::swap(b_blind_player_, other->b_blind_player_);
  other_players_.UnsafeArenaSwap(&other->other_players_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeatInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeatInfoMessage_descriptor_;
  metadata.reflection = SeatInfoMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeatInfoMessage

// optional .texas_code.protocol.Player banker = 1;
bool SeatInfoMessage::has_banker() const {
  return !_is_default_instance_ && banker_ != NULL;
}
void SeatInfoMessage::clear_banker() {
  if (GetArenaNoVirtual() == NULL && banker_ != NULL) delete banker_;
  banker_ = NULL;
}
const ::texas_code::protocol::Player& SeatInfoMessage::banker() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.SeatInfoMessage.banker)
  return banker_ != NULL ? *banker_ : *default_instance_->banker_;
}
::texas_code::protocol::Player* SeatInfoMessage::mutable_banker() {
  
  if (banker_ == NULL) {
    banker_ = new ::texas_code::protocol::Player;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.SeatInfoMessage.banker)
  return banker_;
}
::texas_code::protocol::Player* SeatInfoMessage::release_banker() {
  
  ::texas_code::protocol::Player* temp = banker_;
  banker_ = NULL;
  return temp;
}
void SeatInfoMessage::set_allocated_banker(::texas_code::protocol::Player* banker) {
  delete banker_;
  banker_ = banker;
  if (banker) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.SeatInfoMessage.banker)
}

// optional .texas_code.protocol.Player s_blind_player = 2;
bool SeatInfoMessage::has_s_blind_player() const {
  return !_is_default_instance_ && s_blind_player_ != NULL;
}
void SeatInfoMessage::clear_s_blind_player() {
  if (GetArenaNoVirtual() == NULL && s_blind_player_ != NULL) delete s_blind_player_;
  s_blind_player_ = NULL;
}
const ::texas_code::protocol::Player& SeatInfoMessage::s_blind_player() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.SeatInfoMessage.s_blind_player)
  return s_blind_player_ != NULL ? *s_blind_player_ : *default_instance_->s_blind_player_;
}
::texas_code::protocol::Player* SeatInfoMessage::mutable_s_blind_player() {
  
  if (s_blind_player_ == NULL) {
    s_blind_player_ = new ::texas_code::protocol::Player;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.SeatInfoMessage.s_blind_player)
  return s_blind_player_;
}
::texas_code::protocol::Player* SeatInfoMessage::release_s_blind_player() {
  
  ::texas_code::protocol::Player* temp = s_blind_player_;
  s_blind_player_ = NULL;
  return temp;
}
void SeatInfoMessage::set_allocated_s_blind_player(::texas_code::protocol::Player* s_blind_player) {
  delete s_blind_player_;
  s_blind_player_ = s_blind_player;
  if (s_blind_player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.SeatInfoMessage.s_blind_player)
}

// optional .texas_code.protocol.Player b_blind_player = 3;
bool SeatInfoMessage::has_b_blind_player() const {
  return !_is_default_instance_ && b_blind_player_ != NULL;
}
void SeatInfoMessage::clear_b_blind_player() {
  if (GetArenaNoVirtual() == NULL && b_blind_player_ != NULL) delete b_blind_player_;
  b_blind_player_ = NULL;
}
const ::texas_code::protocol::Player& SeatInfoMessage::b_blind_player() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.SeatInfoMessage.b_blind_player)
  return b_blind_player_ != NULL ? *b_blind_player_ : *default_instance_->b_blind_player_;
}
::texas_code::protocol::Player* SeatInfoMessage::mutable_b_blind_player() {
  
  if (b_blind_player_ == NULL) {
    b_blind_player_ = new ::texas_code::protocol::Player;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.SeatInfoMessage.b_blind_player)
  return b_blind_player_;
}
::texas_code::protocol::Player* SeatInfoMessage::release_b_blind_player() {
  
  ::texas_code::protocol::Player* temp = b_blind_player_;
  b_blind_player_ = NULL;
  return temp;
}
void SeatInfoMessage::set_allocated_b_blind_player(::texas_code::protocol::Player* b_blind_player) {
  delete b_blind_player_;
  b_blind_player_ = b_blind_player;
  if (b_blind_player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.SeatInfoMessage.b_blind_player)
}

// repeated .texas_code.protocol.Player other_players = 4;
int SeatInfoMessage::other_players_size() const {
  return other_players_.size();
}
void SeatInfoMessage::clear_other_players() {
  other_players_.Clear();
}
const ::texas_code::protocol::Player& SeatInfoMessage::other_players(int index) const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.SeatInfoMessage.other_players)
  return other_players_.Get(index);
}
::texas_code::protocol::Player* SeatInfoMessage::mutable_other_players(int index) {
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.SeatInfoMessage.other_players)
  return other_players_.Mutable(index);
}
::texas_code::protocol::Player* SeatInfoMessage::add_other_players() {
  // @@protoc_insertion_point(field_add:texas_code.protocol.SeatInfoMessage.other_players)
  return other_players_.Add();
}
::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Player >*
SeatInfoMessage::mutable_other_players() {
  // @@protoc_insertion_point(field_mutable_list:texas_code.protocol.SeatInfoMessage.other_players)
  return &other_players_;
}
const ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Player >&
SeatInfoMessage::other_players() const {
  // @@protoc_insertion_point(field_list:texas_code.protocol.SeatInfoMessage.other_players)
  return other_players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlindMessage::kRequestIdFieldNumber;
const int BlindMessage::kPlayerFieldNumber;
const int BlindMessage::kBetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlindMessage::BlindMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.BlindMessage)
}

void BlindMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  player_ = const_cast< ::texas_code::protocol::Player*>(&::texas_code::protocol::Player::default_instance());
}

BlindMessage::BlindMessage(const BlindMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.BlindMessage)
}

void BlindMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  request_id_ = 0;
  player_ = NULL;
  bet_ = GOOGLE_LONGLONG(0);
}

BlindMessage::~BlindMessage() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.BlindMessage)
  SharedDtor();
}

void BlindMessage::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void BlindMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlindMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlindMessage_descriptor_;
}

const BlindMessage& BlindMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

BlindMessage* BlindMessage::default_instance_ = NULL;

BlindMessage* BlindMessage::New(::google::protobuf::Arena* arena) const {
  BlindMessage* n = new BlindMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlindMessage::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BlindMessage*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(bet_, request_id_);
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool BlindMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.BlindMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }

      // optional .texas_code.protocol.Player player = 2;
      case 2: {
        if (tag == 18) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bet;
        break;
      }

      // optional int64 bet = 3;
      case 3: {
        if (tag == 24) {
         parse_bet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.BlindMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.BlindMessage)
  return false;
#undef DO_
}

void BlindMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.BlindMessage)
  // optional int32 request_id = 1;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->request_id(), output);
  }

  // optional .texas_code.protocol.Player player = 2;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->player_, output);
  }

  // optional int64 bet = 3;
  if (this->bet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bet(), output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.BlindMessage)
}

::google::protobuf::uint8* BlindMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.BlindMessage)
  // optional int32 request_id = 1;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->request_id(), target);
  }

  // optional .texas_code.protocol.Player player = 2;
  if (this->has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->player_, target);
  }

  // optional int64 bet = 3;
  if (this->bet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bet(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.BlindMessage)
  return target;
}

int BlindMessage::ByteSize() const {
  int total_size = 0;

  // optional int32 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // optional .texas_code.protocol.Player player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }

  // optional int64 bet = 3;
  if (this->bet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bet());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlindMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BlindMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BlindMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlindMessage::MergeFrom(const BlindMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.has_player()) {
    mutable_player()->::texas_code::protocol::Player::MergeFrom(from.player());
  }
  if (from.bet() != 0) {
    set_bet(from.bet());
  }
}

void BlindMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlindMessage::CopyFrom(const BlindMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlindMessage::IsInitialized() const {

  return true;
}

void BlindMessage::Swap(BlindMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlindMessage::InternalSwap(BlindMessage* other) {
  std::swap(request_id_, other->request_id_);
  std::swap(player_, other->player_);
  std::swap(bet_, other->bet_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlindMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlindMessage_descriptor_;
  metadata.reflection = BlindMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlindMessage

// optional int32 request_id = 1;
void BlindMessage::clear_request_id() {
  request_id_ = 0;
}
 ::google::protobuf::int32 BlindMessage::request_id() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.BlindMessage.request_id)
  return request_id_;
}
 void BlindMessage::set_request_id(::google::protobuf::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.BlindMessage.request_id)
}

// optional .texas_code.protocol.Player player = 2;
bool BlindMessage::has_player() const {
  return !_is_default_instance_ && player_ != NULL;
}
void BlindMessage::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
const ::texas_code::protocol::Player& BlindMessage::player() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.BlindMessage.player)
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
::texas_code::protocol::Player* BlindMessage::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::texas_code::protocol::Player;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.BlindMessage.player)
  return player_;
}
::texas_code::protocol::Player* BlindMessage::release_player() {
  
  ::texas_code::protocol::Player* temp = player_;
  player_ = NULL;
  return temp;
}
void BlindMessage::set_allocated_player(::texas_code::protocol::Player* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.BlindMessage.player)
}

// optional int64 bet = 3;
void BlindMessage::clear_bet() {
  bet_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 BlindMessage::bet() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.BlindMessage.bet)
  return bet_;
}
 void BlindMessage::set_bet(::google::protobuf::int64 value) {
  
  bet_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.BlindMessage.bet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HoldCardsMessage::kCard1FieldNumber;
const int HoldCardsMessage::kCard2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HoldCardsMessage::HoldCardsMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.HoldCardsMessage)
}

void HoldCardsMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  card_1_ = const_cast< ::texas_code::protocol::Card*>(&::texas_code::protocol::Card::default_instance());
  card_2_ = const_cast< ::texas_code::protocol::Card*>(&::texas_code::protocol::Card::default_instance());
}

HoldCardsMessage::HoldCardsMessage(const HoldCardsMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.HoldCardsMessage)
}

void HoldCardsMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  card_1_ = NULL;
  card_2_ = NULL;
}

HoldCardsMessage::~HoldCardsMessage() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.HoldCardsMessage)
  SharedDtor();
}

void HoldCardsMessage::SharedDtor() {
  if (this != default_instance_) {
    delete card_1_;
    delete card_2_;
  }
}

void HoldCardsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HoldCardsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HoldCardsMessage_descriptor_;
}

const HoldCardsMessage& HoldCardsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

HoldCardsMessage* HoldCardsMessage::default_instance_ = NULL;

HoldCardsMessage* HoldCardsMessage::New(::google::protobuf::Arena* arena) const {
  HoldCardsMessage* n = new HoldCardsMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HoldCardsMessage::Clear() {
  if (GetArenaNoVirtual() == NULL && card_1_ != NULL) delete card_1_;
  card_1_ = NULL;
  if (GetArenaNoVirtual() == NULL && card_2_ != NULL) delete card_2_;
  card_2_ = NULL;
}

bool HoldCardsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.HoldCardsMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .texas_code.protocol.Card card_1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card_1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_card_2;
        break;
      }

      // optional .texas_code.protocol.Card card_2 = 2;
      case 2: {
        if (tag == 18) {
         parse_card_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card_2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.HoldCardsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.HoldCardsMessage)
  return false;
#undef DO_
}

void HoldCardsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.HoldCardsMessage)
  // optional .texas_code.protocol.Card card_1 = 1;
  if (this->has_card_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->card_1_, output);
  }

  // optional .texas_code.protocol.Card card_2 = 2;
  if (this->has_card_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->card_2_, output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.HoldCardsMessage)
}

::google::protobuf::uint8* HoldCardsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.HoldCardsMessage)
  // optional .texas_code.protocol.Card card_1 = 1;
  if (this->has_card_1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->card_1_, target);
  }

  // optional .texas_code.protocol.Card card_2 = 2;
  if (this->has_card_2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->card_2_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.HoldCardsMessage)
  return target;
}

int HoldCardsMessage::ByteSize() const {
  int total_size = 0;

  // optional .texas_code.protocol.Card card_1 = 1;
  if (this->has_card_1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->card_1_);
  }

  // optional .texas_code.protocol.Card card_2 = 2;
  if (this->has_card_2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->card_2_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HoldCardsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HoldCardsMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HoldCardsMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HoldCardsMessage::MergeFrom(const HoldCardsMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_card_1()) {
    mutable_card_1()->::texas_code::protocol::Card::MergeFrom(from.card_1());
  }
  if (from.has_card_2()) {
    mutable_card_2()->::texas_code::protocol::Card::MergeFrom(from.card_2());
  }
}

void HoldCardsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HoldCardsMessage::CopyFrom(const HoldCardsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HoldCardsMessage::IsInitialized() const {

  return true;
}

void HoldCardsMessage::Swap(HoldCardsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HoldCardsMessage::InternalSwap(HoldCardsMessage* other) {
  std::swap(card_1_, other->card_1_);
  std::swap(card_2_, other->card_2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HoldCardsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HoldCardsMessage_descriptor_;
  metadata.reflection = HoldCardsMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HoldCardsMessage

// optional .texas_code.protocol.Card card_1 = 1;
bool HoldCardsMessage::has_card_1() const {
  return !_is_default_instance_ && card_1_ != NULL;
}
void HoldCardsMessage::clear_card_1() {
  if (GetArenaNoVirtual() == NULL && card_1_ != NULL) delete card_1_;
  card_1_ = NULL;
}
const ::texas_code::protocol::Card& HoldCardsMessage::card_1() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.HoldCardsMessage.card_1)
  return card_1_ != NULL ? *card_1_ : *default_instance_->card_1_;
}
::texas_code::protocol::Card* HoldCardsMessage::mutable_card_1() {
  
  if (card_1_ == NULL) {
    card_1_ = new ::texas_code::protocol::Card;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.HoldCardsMessage.card_1)
  return card_1_;
}
::texas_code::protocol::Card* HoldCardsMessage::release_card_1() {
  
  ::texas_code::protocol::Card* temp = card_1_;
  card_1_ = NULL;
  return temp;
}
void HoldCardsMessage::set_allocated_card_1(::texas_code::protocol::Card* card_1) {
  delete card_1_;
  card_1_ = card_1;
  if (card_1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.HoldCardsMessage.card_1)
}

// optional .texas_code.protocol.Card card_2 = 2;
bool HoldCardsMessage::has_card_2() const {
  return !_is_default_instance_ && card_2_ != NULL;
}
void HoldCardsMessage::clear_card_2() {
  if (GetArenaNoVirtual() == NULL && card_2_ != NULL) delete card_2_;
  card_2_ = NULL;
}
const ::texas_code::protocol::Card& HoldCardsMessage::card_2() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.HoldCardsMessage.card_2)
  return card_2_ != NULL ? *card_2_ : *default_instance_->card_2_;
}
::texas_code::protocol::Card* HoldCardsMessage::mutable_card_2() {
  
  if (card_2_ == NULL) {
    card_2_ = new ::texas_code::protocol::Card;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.HoldCardsMessage.card_2)
  return card_2_;
}
::texas_code::protocol::Card* HoldCardsMessage::release_card_2() {
  
  ::texas_code::protocol::Card* temp = card_2_;
  card_2_ = NULL;
  return temp;
}
void HoldCardsMessage::set_allocated_card_2(::texas_code::protocol::Card* card_2) {
  delete card_2_;
  card_2_ = card_2;
  if (card_2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.HoldCardsMessage.card_2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InquireActionMessage::kRequestIdFieldNumber;
const int InquireActionMessage::kPlayerActionsFieldNumber;
const int InquireActionMessage::kPotAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InquireActionMessage::InquireActionMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.InquireActionMessage)
}

void InquireActionMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InquireActionMessage::InquireActionMessage(const InquireActionMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.InquireActionMessage)
}

void InquireActionMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  request_id_ = GOOGLE_LONGLONG(0);
  pot_amount_ = GOOGLE_LONGLONG(0);
}

InquireActionMessage::~InquireActionMessage() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.InquireActionMessage)
  SharedDtor();
}

void InquireActionMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InquireActionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InquireActionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InquireActionMessage_descriptor_;
}

const InquireActionMessage& InquireActionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

InquireActionMessage* InquireActionMessage::default_instance_ = NULL;

InquireActionMessage* InquireActionMessage::New(::google::protobuf::Arena* arena) const {
  InquireActionMessage* n = new InquireActionMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InquireActionMessage::Clear() {
  request_id_ = GOOGLE_LONGLONG(0);
  pot_amount_ = GOOGLE_LONGLONG(0);
  player_actions_.Clear();
}

bool InquireActionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.InquireActionMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_actions;
        break;
      }

      // repeated .texas_code.protocol.PlayerAction player_actions = 2;
      case 2: {
        if (tag == 18) {
         parse_player_actions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_player_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_player_actions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_player_actions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_pot_amount;
        break;
      }

      // optional int64 pot_amount = 3;
      case 3: {
        if (tag == 24) {
         parse_pot_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pot_amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.InquireActionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.InquireActionMessage)
  return false;
#undef DO_
}

void InquireActionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.InquireActionMessage)
  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->request_id(), output);
  }

  // repeated .texas_code.protocol.PlayerAction player_actions = 2;
  for (unsigned int i = 0, n = this->player_actions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_actions(i), output);
  }

  // optional int64 pot_amount = 3;
  if (this->pot_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->pot_amount(), output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.InquireActionMessage)
}

::google::protobuf::uint8* InquireActionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.InquireActionMessage)
  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->request_id(), target);
  }

  // repeated .texas_code.protocol.PlayerAction player_actions = 2;
  for (unsigned int i = 0, n = this->player_actions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_actions(i), target);
  }

  // optional int64 pot_amount = 3;
  if (this->pot_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->pot_amount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.InquireActionMessage)
  return target;
}

int InquireActionMessage::ByteSize() const {
  int total_size = 0;

  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  // optional int64 pot_amount = 3;
  if (this->pot_amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pot_amount());
  }

  // repeated .texas_code.protocol.PlayerAction player_actions = 2;
  total_size += 1 * this->player_actions_size();
  for (int i = 0; i < this->player_actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_actions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InquireActionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InquireActionMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InquireActionMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InquireActionMessage::MergeFrom(const InquireActionMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  player_actions_.MergeFrom(from.player_actions_);
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.pot_amount() != 0) {
    set_pot_amount(from.pot_amount());
  }
}

void InquireActionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InquireActionMessage::CopyFrom(const InquireActionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InquireActionMessage::IsInitialized() const {

  return true;
}

void InquireActionMessage::Swap(InquireActionMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InquireActionMessage::InternalSwap(InquireActionMessage* other) {
  std::swap(request_id_, other->request_id_);
  player_actions_.UnsafeArenaSwap(&other->player_actions_);
  std::swap(pot_amount_, other->pot_amount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InquireActionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InquireActionMessage_descriptor_;
  metadata.reflection = InquireActionMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InquireActionMessage

// optional int64 request_id = 1;
void InquireActionMessage::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 InquireActionMessage::request_id() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.InquireActionMessage.request_id)
  return request_id_;
}
 void InquireActionMessage::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.InquireActionMessage.request_id)
}

// repeated .texas_code.protocol.PlayerAction player_actions = 2;
int InquireActionMessage::player_actions_size() const {
  return player_actions_.size();
}
void InquireActionMessage::clear_player_actions() {
  player_actions_.Clear();
}
const ::texas_code::protocol::PlayerAction& InquireActionMessage::player_actions(int index) const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.InquireActionMessage.player_actions)
  return player_actions_.Get(index);
}
::texas_code::protocol::PlayerAction* InquireActionMessage::mutable_player_actions(int index) {
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.InquireActionMessage.player_actions)
  return player_actions_.Mutable(index);
}
::texas_code::protocol::PlayerAction* InquireActionMessage::add_player_actions() {
  // @@protoc_insertion_point(field_add:texas_code.protocol.InquireActionMessage.player_actions)
  return player_actions_.Add();
}
::google::protobuf::RepeatedPtrField< ::texas_code::protocol::PlayerAction >*
InquireActionMessage::mutable_player_actions() {
  // @@protoc_insertion_point(field_mutable_list:texas_code.protocol.InquireActionMessage.player_actions)
  return &player_actions_;
}
const ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::PlayerAction >&
InquireActionMessage::player_actions() const {
  // @@protoc_insertion_point(field_list:texas_code.protocol.InquireActionMessage.player_actions)
  return player_actions_;
}

// optional int64 pot_amount = 3;
void InquireActionMessage::clear_pot_amount() {
  pot_amount_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 InquireActionMessage::pot_amount() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.InquireActionMessage.pot_amount)
  return pot_amount_;
}
 void InquireActionMessage::set_pot_amount(::google::protobuf::int64 value) {
  
  pot_amount_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.InquireActionMessage.pot_amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlopMessage::kFlopCard1FieldNumber;
const int FlopMessage::kFlopCard2FieldNumber;
const int FlopMessage::kFlopCard3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlopMessage::FlopMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.FlopMessage)
}

void FlopMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  flop_card_1_ = const_cast< ::texas_code::protocol::Card*>(&::texas_code::protocol::Card::default_instance());
  flop_card_2_ = const_cast< ::texas_code::protocol::Card*>(&::texas_code::protocol::Card::default_instance());
  flop_card_3_ = const_cast< ::texas_code::protocol::Card*>(&::texas_code::protocol::Card::default_instance());
}

FlopMessage::FlopMessage(const FlopMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.FlopMessage)
}

void FlopMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  flop_card_1_ = NULL;
  flop_card_2_ = NULL;
  flop_card_3_ = NULL;
}

FlopMessage::~FlopMessage() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.FlopMessage)
  SharedDtor();
}

void FlopMessage::SharedDtor() {
  if (this != default_instance_) {
    delete flop_card_1_;
    delete flop_card_2_;
    delete flop_card_3_;
  }
}

void FlopMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlopMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlopMessage_descriptor_;
}

const FlopMessage& FlopMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

FlopMessage* FlopMessage::default_instance_ = NULL;

FlopMessage* FlopMessage::New(::google::protobuf::Arena* arena) const {
  FlopMessage* n = new FlopMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlopMessage::Clear() {
  if (GetArenaNoVirtual() == NULL && flop_card_1_ != NULL) delete flop_card_1_;
  flop_card_1_ = NULL;
  if (GetArenaNoVirtual() == NULL && flop_card_2_ != NULL) delete flop_card_2_;
  flop_card_2_ = NULL;
  if (GetArenaNoVirtual() == NULL && flop_card_3_ != NULL) delete flop_card_3_;
  flop_card_3_ = NULL;
}

bool FlopMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.FlopMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .texas_code.protocol.Card flop_card_1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flop_card_1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_flop_card_2;
        break;
      }

      // optional .texas_code.protocol.Card flop_card_2 = 2;
      case 2: {
        if (tag == 18) {
         parse_flop_card_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flop_card_2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_flop_card_3;
        break;
      }

      // optional .texas_code.protocol.Card flop_card_3 = 3;
      case 3: {
        if (tag == 26) {
         parse_flop_card_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flop_card_3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.FlopMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.FlopMessage)
  return false;
#undef DO_
}

void FlopMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.FlopMessage)
  // optional .texas_code.protocol.Card flop_card_1 = 1;
  if (this->has_flop_card_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->flop_card_1_, output);
  }

  // optional .texas_code.protocol.Card flop_card_2 = 2;
  if (this->has_flop_card_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->flop_card_2_, output);
  }

  // optional .texas_code.protocol.Card flop_card_3 = 3;
  if (this->has_flop_card_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->flop_card_3_, output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.FlopMessage)
}

::google::protobuf::uint8* FlopMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.FlopMessage)
  // optional .texas_code.protocol.Card flop_card_1 = 1;
  if (this->has_flop_card_1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->flop_card_1_, target);
  }

  // optional .texas_code.protocol.Card flop_card_2 = 2;
  if (this->has_flop_card_2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->flop_card_2_, target);
  }

  // optional .texas_code.protocol.Card flop_card_3 = 3;
  if (this->has_flop_card_3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->flop_card_3_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.FlopMessage)
  return target;
}

int FlopMessage::ByteSize() const {
  int total_size = 0;

  // optional .texas_code.protocol.Card flop_card_1 = 1;
  if (this->has_flop_card_1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->flop_card_1_);
  }

  // optional .texas_code.protocol.Card flop_card_2 = 2;
  if (this->has_flop_card_2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->flop_card_2_);
  }

  // optional .texas_code.protocol.Card flop_card_3 = 3;
  if (this->has_flop_card_3()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->flop_card_3_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlopMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FlopMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FlopMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlopMessage::MergeFrom(const FlopMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_flop_card_1()) {
    mutable_flop_card_1()->::texas_code::protocol::Card::MergeFrom(from.flop_card_1());
  }
  if (from.has_flop_card_2()) {
    mutable_flop_card_2()->::texas_code::protocol::Card::MergeFrom(from.flop_card_2());
  }
  if (from.has_flop_card_3()) {
    mutable_flop_card_3()->::texas_code::protocol::Card::MergeFrom(from.flop_card_3());
  }
}

void FlopMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlopMessage::CopyFrom(const FlopMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlopMessage::IsInitialized() const {

  return true;
}

void FlopMessage::Swap(FlopMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlopMessage::InternalSwap(FlopMessage* other) {
  std::swap(flop_card_1_, other->flop_card_1_);
  std::swap(flop_card_2_, other->flop_card_2_);
  std::swap(flop_card_3_, other->flop_card_3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FlopMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlopMessage_descriptor_;
  metadata.reflection = FlopMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlopMessage

// optional .texas_code.protocol.Card flop_card_1 = 1;
bool FlopMessage::has_flop_card_1() const {
  return !_is_default_instance_ && flop_card_1_ != NULL;
}
void FlopMessage::clear_flop_card_1() {
  if (GetArenaNoVirtual() == NULL && flop_card_1_ != NULL) delete flop_card_1_;
  flop_card_1_ = NULL;
}
const ::texas_code::protocol::Card& FlopMessage::flop_card_1() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.FlopMessage.flop_card_1)
  return flop_card_1_ != NULL ? *flop_card_1_ : *default_instance_->flop_card_1_;
}
::texas_code::protocol::Card* FlopMessage::mutable_flop_card_1() {
  
  if (flop_card_1_ == NULL) {
    flop_card_1_ = new ::texas_code::protocol::Card;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.FlopMessage.flop_card_1)
  return flop_card_1_;
}
::texas_code::protocol::Card* FlopMessage::release_flop_card_1() {
  
  ::texas_code::protocol::Card* temp = flop_card_1_;
  flop_card_1_ = NULL;
  return temp;
}
void FlopMessage::set_allocated_flop_card_1(::texas_code::protocol::Card* flop_card_1) {
  delete flop_card_1_;
  flop_card_1_ = flop_card_1;
  if (flop_card_1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.FlopMessage.flop_card_1)
}

// optional .texas_code.protocol.Card flop_card_2 = 2;
bool FlopMessage::has_flop_card_2() const {
  return !_is_default_instance_ && flop_card_2_ != NULL;
}
void FlopMessage::clear_flop_card_2() {
  if (GetArenaNoVirtual() == NULL && flop_card_2_ != NULL) delete flop_card_2_;
  flop_card_2_ = NULL;
}
const ::texas_code::protocol::Card& FlopMessage::flop_card_2() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.FlopMessage.flop_card_2)
  return flop_card_2_ != NULL ? *flop_card_2_ : *default_instance_->flop_card_2_;
}
::texas_code::protocol::Card* FlopMessage::mutable_flop_card_2() {
  
  if (flop_card_2_ == NULL) {
    flop_card_2_ = new ::texas_code::protocol::Card;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.FlopMessage.flop_card_2)
  return flop_card_2_;
}
::texas_code::protocol::Card* FlopMessage::release_flop_card_2() {
  
  ::texas_code::protocol::Card* temp = flop_card_2_;
  flop_card_2_ = NULL;
  return temp;
}
void FlopMessage::set_allocated_flop_card_2(::texas_code::protocol::Card* flop_card_2) {
  delete flop_card_2_;
  flop_card_2_ = flop_card_2;
  if (flop_card_2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.FlopMessage.flop_card_2)
}

// optional .texas_code.protocol.Card flop_card_3 = 3;
bool FlopMessage::has_flop_card_3() const {
  return !_is_default_instance_ && flop_card_3_ != NULL;
}
void FlopMessage::clear_flop_card_3() {
  if (GetArenaNoVirtual() == NULL && flop_card_3_ != NULL) delete flop_card_3_;
  flop_card_3_ = NULL;
}
const ::texas_code::protocol::Card& FlopMessage::flop_card_3() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.FlopMessage.flop_card_3)
  return flop_card_3_ != NULL ? *flop_card_3_ : *default_instance_->flop_card_3_;
}
::texas_code::protocol::Card* FlopMessage::mutable_flop_card_3() {
  
  if (flop_card_3_ == NULL) {
    flop_card_3_ = new ::texas_code::protocol::Card;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.FlopMessage.flop_card_3)
  return flop_card_3_;
}
::texas_code::protocol::Card* FlopMessage::release_flop_card_3() {
  
  ::texas_code::protocol::Card* temp = flop_card_3_;
  flop_card_3_ = NULL;
  return temp;
}
void FlopMessage::set_allocated_flop_card_3(::texas_code::protocol::Card* flop_card_3) {
  delete flop_card_3_;
  flop_card_3_ = flop_card_3;
  if (flop_card_3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.FlopMessage.flop_card_3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TurnMessage::kTurnCardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TurnMessage::TurnMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.TurnMessage)
}

void TurnMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  turn_card_ = const_cast< ::texas_code::protocol::Card*>(&::texas_code::protocol::Card::default_instance());
}

TurnMessage::TurnMessage(const TurnMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.TurnMessage)
}

void TurnMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  turn_card_ = NULL;
}

TurnMessage::~TurnMessage() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.TurnMessage)
  SharedDtor();
}

void TurnMessage::SharedDtor() {
  if (this != default_instance_) {
    delete turn_card_;
  }
}

void TurnMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnMessage_descriptor_;
}

const TurnMessage& TurnMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

TurnMessage* TurnMessage::default_instance_ = NULL;

TurnMessage* TurnMessage::New(::google::protobuf::Arena* arena) const {
  TurnMessage* n = new TurnMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TurnMessage::Clear() {
  if (GetArenaNoVirtual() == NULL && turn_card_ != NULL) delete turn_card_;
  turn_card_ = NULL;
}

bool TurnMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.TurnMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .texas_code.protocol.Card turn_card = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_turn_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.TurnMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.TurnMessage)
  return false;
#undef DO_
}

void TurnMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.TurnMessage)
  // optional .texas_code.protocol.Card turn_card = 1;
  if (this->has_turn_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->turn_card_, output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.TurnMessage)
}

::google::protobuf::uint8* TurnMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.TurnMessage)
  // optional .texas_code.protocol.Card turn_card = 1;
  if (this->has_turn_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->turn_card_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.TurnMessage)
  return target;
}

int TurnMessage::ByteSize() const {
  int total_size = 0;

  // optional .texas_code.protocol.Card turn_card = 1;
  if (this->has_turn_card()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->turn_card_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TurnMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TurnMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnMessage::MergeFrom(const TurnMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_turn_card()) {
    mutable_turn_card()->::texas_code::protocol::Card::MergeFrom(from.turn_card());
  }
}

void TurnMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnMessage::CopyFrom(const TurnMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnMessage::IsInitialized() const {

  return true;
}

void TurnMessage::Swap(TurnMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TurnMessage::InternalSwap(TurnMessage* other) {
  std::swap(turn_card_, other->turn_card_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TurnMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnMessage_descriptor_;
  metadata.reflection = TurnMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TurnMessage

// optional .texas_code.protocol.Card turn_card = 1;
bool TurnMessage::has_turn_card() const {
  return !_is_default_instance_ && turn_card_ != NULL;
}
void TurnMessage::clear_turn_card() {
  if (GetArenaNoVirtual() == NULL && turn_card_ != NULL) delete turn_card_;
  turn_card_ = NULL;
}
const ::texas_code::protocol::Card& TurnMessage::turn_card() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.TurnMessage.turn_card)
  return turn_card_ != NULL ? *turn_card_ : *default_instance_->turn_card_;
}
::texas_code::protocol::Card* TurnMessage::mutable_turn_card() {
  
  if (turn_card_ == NULL) {
    turn_card_ = new ::texas_code::protocol::Card;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.TurnMessage.turn_card)
  return turn_card_;
}
::texas_code::protocol::Card* TurnMessage::release_turn_card() {
  
  ::texas_code::protocol::Card* temp = turn_card_;
  turn_card_ = NULL;
  return temp;
}
void TurnMessage::set_allocated_turn_card(::texas_code::protocol::Card* turn_card) {
  delete turn_card_;
  turn_card_ = turn_card;
  if (turn_card) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.TurnMessage.turn_card)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RiverMessage::kRiverCardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RiverMessage::RiverMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.RiverMessage)
}

void RiverMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  river_card_ = const_cast< ::texas_code::protocol::Card*>(&::texas_code::protocol::Card::default_instance());
}

RiverMessage::RiverMessage(const RiverMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.RiverMessage)
}

void RiverMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  river_card_ = NULL;
}

RiverMessage::~RiverMessage() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.RiverMessage)
  SharedDtor();
}

void RiverMessage::SharedDtor() {
  if (this != default_instance_) {
    delete river_card_;
  }
}

void RiverMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiverMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RiverMessage_descriptor_;
}

const RiverMessage& RiverMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RiverMessage* RiverMessage::default_instance_ = NULL;

RiverMessage* RiverMessage::New(::google::protobuf::Arena* arena) const {
  RiverMessage* n = new RiverMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RiverMessage::Clear() {
  if (GetArenaNoVirtual() == NULL && river_card_ != NULL) delete river_card_;
  river_card_ = NULL;
}

bool RiverMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.RiverMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .texas_code.protocol.Card river_card = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_river_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.RiverMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.RiverMessage)
  return false;
#undef DO_
}

void RiverMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.RiverMessage)
  // optional .texas_code.protocol.Card river_card = 2;
  if (this->has_river_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->river_card_, output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.RiverMessage)
}

::google::protobuf::uint8* RiverMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.RiverMessage)
  // optional .texas_code.protocol.Card river_card = 2;
  if (this->has_river_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->river_card_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.RiverMessage)
  return target;
}

int RiverMessage::ByteSize() const {
  int total_size = 0;

  // optional .texas_code.protocol.Card river_card = 2;
  if (this->has_river_card()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->river_card_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiverMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RiverMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RiverMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RiverMessage::MergeFrom(const RiverMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_river_card()) {
    mutable_river_card()->::texas_code::protocol::Card::MergeFrom(from.river_card());
  }
}

void RiverMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiverMessage::CopyFrom(const RiverMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiverMessage::IsInitialized() const {

  return true;
}

void RiverMessage::Swap(RiverMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RiverMessage::InternalSwap(RiverMessage* other) {
  std::swap(river_card_, other->river_card_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RiverMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RiverMessage_descriptor_;
  metadata.reflection = RiverMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RiverMessage

// optional .texas_code.protocol.Card river_card = 2;
bool RiverMessage::has_river_card() const {
  return !_is_default_instance_ && river_card_ != NULL;
}
void RiverMessage::clear_river_card() {
  if (GetArenaNoVirtual() == NULL && river_card_ != NULL) delete river_card_;
  river_card_ = NULL;
}
const ::texas_code::protocol::Card& RiverMessage::river_card() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.RiverMessage.river_card)
  return river_card_ != NULL ? *river_card_ : *default_instance_->river_card_;
}
::texas_code::protocol::Card* RiverMessage::mutable_river_card() {
  
  if (river_card_ == NULL) {
    river_card_ = new ::texas_code::protocol::Card;
  }
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.RiverMessage.river_card)
  return river_card_;
}
::texas_code::protocol::Card* RiverMessage::release_river_card() {
  
  ::texas_code::protocol::Card* temp = river_card_;
  river_card_ = NULL;
  return temp;
}
void RiverMessage::set_allocated_river_card(::texas_code::protocol::Card* river_card) {
  delete river_card_;
  river_card_ = river_card;
  if (river_card) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:texas_code.protocol.RiverMessage.river_card)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShowDownMessage::kPublicCardsFieldNumber;
const int ShowDownMessage::kHandInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowDownMessage::ShowDownMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.ShowDownMessage)
}

void ShowDownMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ShowDownMessage::ShowDownMessage(const ShowDownMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.ShowDownMessage)
}

void ShowDownMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ShowDownMessage::~ShowDownMessage() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.ShowDownMessage)
  SharedDtor();
}

void ShowDownMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShowDownMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowDownMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShowDownMessage_descriptor_;
}

const ShowDownMessage& ShowDownMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ShowDownMessage* ShowDownMessage::default_instance_ = NULL;

ShowDownMessage* ShowDownMessage::New(::google::protobuf::Arena* arena) const {
  ShowDownMessage* n = new ShowDownMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShowDownMessage::Clear() {
  public_cards_.Clear();
  hand_infos_.Clear();
}

bool ShowDownMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.ShowDownMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .texas_code.protocol.Card public_cards = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_public_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_public_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_public_cards;
        if (input->ExpectTag(18)) goto parse_loop_hand_infos;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .texas_code.protocol.PlayerHandInfo hand_infos = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_hand_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_hand_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_hand_infos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.ShowDownMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.ShowDownMessage)
  return false;
#undef DO_
}

void ShowDownMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.ShowDownMessage)
  // repeated .texas_code.protocol.Card public_cards = 1;
  for (unsigned int i = 0, n = this->public_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->public_cards(i), output);
  }

  // repeated .texas_code.protocol.PlayerHandInfo hand_infos = 2;
  for (unsigned int i = 0, n = this->hand_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hand_infos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.ShowDownMessage)
}

::google::protobuf::uint8* ShowDownMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.ShowDownMessage)
  // repeated .texas_code.protocol.Card public_cards = 1;
  for (unsigned int i = 0, n = this->public_cards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->public_cards(i), target);
  }

  // repeated .texas_code.protocol.PlayerHandInfo hand_infos = 2;
  for (unsigned int i = 0, n = this->hand_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hand_infos(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.ShowDownMessage)
  return target;
}

int ShowDownMessage::ByteSize() const {
  int total_size = 0;

  // repeated .texas_code.protocol.Card public_cards = 1;
  total_size += 1 * this->public_cards_size();
  for (int i = 0; i < this->public_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->public_cards(i));
  }

  // repeated .texas_code.protocol.PlayerHandInfo hand_infos = 2;
  total_size += 1 * this->hand_infos_size();
  for (int i = 0; i < this->hand_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_infos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowDownMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ShowDownMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ShowDownMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShowDownMessage::MergeFrom(const ShowDownMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  public_cards_.MergeFrom(from.public_cards_);
  hand_infos_.MergeFrom(from.hand_infos_);
}

void ShowDownMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowDownMessage::CopyFrom(const ShowDownMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowDownMessage::IsInitialized() const {

  return true;
}

void ShowDownMessage::Swap(ShowDownMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowDownMessage::InternalSwap(ShowDownMessage* other) {
  public_cards_.UnsafeArenaSwap(&other->public_cards_);
  hand_infos_.UnsafeArenaSwap(&other->hand_infos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShowDownMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShowDownMessage_descriptor_;
  metadata.reflection = ShowDownMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShowDownMessage

// repeated .texas_code.protocol.Card public_cards = 1;
int ShowDownMessage::public_cards_size() const {
  return public_cards_.size();
}
void ShowDownMessage::clear_public_cards() {
  public_cards_.Clear();
}
const ::texas_code::protocol::Card& ShowDownMessage::public_cards(int index) const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ShowDownMessage.public_cards)
  return public_cards_.Get(index);
}
::texas_code::protocol::Card* ShowDownMessage::mutable_public_cards(int index) {
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.ShowDownMessage.public_cards)
  return public_cards_.Mutable(index);
}
::texas_code::protocol::Card* ShowDownMessage::add_public_cards() {
  // @@protoc_insertion_point(field_add:texas_code.protocol.ShowDownMessage.public_cards)
  return public_cards_.Add();
}
::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Card >*
ShowDownMessage::mutable_public_cards() {
  // @@protoc_insertion_point(field_mutable_list:texas_code.protocol.ShowDownMessage.public_cards)
  return &public_cards_;
}
const ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Card >&
ShowDownMessage::public_cards() const {
  // @@protoc_insertion_point(field_list:texas_code.protocol.ShowDownMessage.public_cards)
  return public_cards_;
}

// repeated .texas_code.protocol.PlayerHandInfo hand_infos = 2;
int ShowDownMessage::hand_infos_size() const {
  return hand_infos_.size();
}
void ShowDownMessage::clear_hand_infos() {
  hand_infos_.Clear();
}
const ::texas_code::protocol::PlayerHandInfo& ShowDownMessage::hand_infos(int index) const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.ShowDownMessage.hand_infos)
  return hand_infos_.Get(index);
}
::texas_code::protocol::PlayerHandInfo* ShowDownMessage::mutable_hand_infos(int index) {
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.ShowDownMessage.hand_infos)
  return hand_infos_.Mutable(index);
}
::texas_code::protocol::PlayerHandInfo* ShowDownMessage::add_hand_infos() {
  // @@protoc_insertion_point(field_add:texas_code.protocol.ShowDownMessage.hand_infos)
  return hand_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::texas_code::protocol::PlayerHandInfo >*
ShowDownMessage::mutable_hand_infos() {
  // @@protoc_insertion_point(field_mutable_list:texas_code.protocol.ShowDownMessage.hand_infos)
  return &hand_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::PlayerHandInfo >&
ShowDownMessage::hand_infos() const {
  // @@protoc_insertion_point(field_list:texas_code.protocol.ShowDownMessage.hand_infos)
  return hand_infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PotWinMessage::kPlayersFieldNumber;
const int PotWinMessage::kPotWinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PotWinMessage::PotWinMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.PotWinMessage)
}

void PotWinMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PotWinMessage::PotWinMessage(const PotWinMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.PotWinMessage)
}

void PotWinMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PotWinMessage::~PotWinMessage() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.PotWinMessage)
  SharedDtor();
}

void PotWinMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PotWinMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PotWinMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PotWinMessage_descriptor_;
}

const PotWinMessage& PotWinMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

PotWinMessage* PotWinMessage::default_instance_ = NULL;

PotWinMessage* PotWinMessage::New(::google::protobuf::Arena* arena) const {
  PotWinMessage* n = new PotWinMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PotWinMessage::Clear() {
  players_.Clear();
  pot_win_.Clear();
}

bool PotWinMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.PotWinMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .texas_code.protocol.Player players = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_players;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_pot_win;
        break;
      }

      // repeated int64 pot_win = 2;
      case 2: {
        if (tag == 18) {
         parse_pot_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_pot_win())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18, input, this->mutable_pot_win())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.PotWinMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.PotWinMessage)
  return false;
#undef DO_
}

void PotWinMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.PotWinMessage)
  // repeated .texas_code.protocol.Player players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  // repeated int64 pot_win = 2;
  if (this->pot_win_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pot_win_cached_byte_size_);
  }
  for (int i = 0; i < this->pot_win_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->pot_win(i), output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.PotWinMessage)
}

::google::protobuf::uint8* PotWinMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.PotWinMessage)
  // repeated .texas_code.protocol.Player players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  // repeated int64 pot_win = 2;
  if (this->pot_win_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pot_win_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pot_win_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->pot_win(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.PotWinMessage)
  return target;
}

int PotWinMessage::ByteSize() const {
  int total_size = 0;

  // repeated .texas_code.protocol.Player players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated int64 pot_win = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pot_win_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->pot_win(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pot_win_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PotWinMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PotWinMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PotWinMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PotWinMessage::MergeFrom(const PotWinMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  players_.MergeFrom(from.players_);
  pot_win_.MergeFrom(from.pot_win_);
}

void PotWinMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PotWinMessage::CopyFrom(const PotWinMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PotWinMessage::IsInitialized() const {

  return true;
}

void PotWinMessage::Swap(PotWinMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PotWinMessage::InternalSwap(PotWinMessage* other) {
  players_.UnsafeArenaSwap(&other->players_);
  pot_win_.UnsafeArenaSwap(&other->pot_win_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PotWinMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PotWinMessage_descriptor_;
  metadata.reflection = PotWinMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PotWinMessage

// repeated .texas_code.protocol.Player players = 1;
int PotWinMessage::players_size() const {
  return players_.size();
}
void PotWinMessage::clear_players() {
  players_.Clear();
}
const ::texas_code::protocol::Player& PotWinMessage::players(int index) const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.PotWinMessage.players)
  return players_.Get(index);
}
::texas_code::protocol::Player* PotWinMessage::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:texas_code.protocol.PotWinMessage.players)
  return players_.Mutable(index);
}
::texas_code::protocol::Player* PotWinMessage::add_players() {
  // @@protoc_insertion_point(field_add:texas_code.protocol.PotWinMessage.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Player >*
PotWinMessage::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:texas_code.protocol.PotWinMessage.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::texas_code::protocol::Player >&
PotWinMessage::players() const {
  // @@protoc_insertion_point(field_list:texas_code.protocol.PotWinMessage.players)
  return players_;
}

// repeated int64 pot_win = 2;
int PotWinMessage::pot_win_size() const {
  return pot_win_.size();
}
void PotWinMessage::clear_pot_win() {
  pot_win_.Clear();
}
 ::google::protobuf::int64 PotWinMessage::pot_win(int index) const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.PotWinMessage.pot_win)
  return pot_win_.Get(index);
}
 void PotWinMessage::set_pot_win(int index, ::google::protobuf::int64 value) {
  pot_win_.Set(index, value);
  // @@protoc_insertion_point(field_set:texas_code.protocol.PotWinMessage.pot_win)
}
 void PotWinMessage::add_pot_win(::google::protobuf::int64 value) {
  pot_win_.Add(value);
  // @@protoc_insertion_point(field_add:texas_code.protocol.PotWinMessage.pot_win)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PotWinMessage::pot_win() const {
  // @@protoc_insertion_point(field_list:texas_code.protocol.PotWinMessage.pot_win)
  return pot_win_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PotWinMessage::mutable_pot_win() {
  // @@protoc_insertion_point(field_mutable_list:texas_code.protocol.PotWinMessage.pot_win)
  return &pot_win_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameOverMessage::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameOverMessage::GameOverMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.GameOverMessage)
}

void GameOverMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GameOverMessage::GameOverMessage(const GameOverMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.GameOverMessage)
}

void GameOverMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  request_id_ = GOOGLE_LONGLONG(0);
}

GameOverMessage::~GameOverMessage() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.GameOverMessage)
  SharedDtor();
}

void GameOverMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameOverMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOverMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameOverMessage_descriptor_;
}

const GameOverMessage& GameOverMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

GameOverMessage* GameOverMessage::default_instance_ = NULL;

GameOverMessage* GameOverMessage::New(::google::protobuf::Arena* arena) const {
  GameOverMessage* n = new GameOverMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameOverMessage::Clear() {
  request_id_ = GOOGLE_LONGLONG(0);
}

bool GameOverMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.GameOverMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.GameOverMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.GameOverMessage)
  return false;
#undef DO_
}

void GameOverMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.GameOverMessage)
  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->request_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.GameOverMessage)
}

::google::protobuf::uint8* GameOverMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.GameOverMessage)
  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->request_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.GameOverMessage)
  return target;
}

int GameOverMessage::ByteSize() const {
  int total_size = 0;

  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOverMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameOverMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameOverMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameOverMessage::MergeFrom(const GameOverMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
}

void GameOverMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOverMessage::CopyFrom(const GameOverMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOverMessage::IsInitialized() const {

  return true;
}

void GameOverMessage::Swap(GameOverMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameOverMessage::InternalSwap(GameOverMessage* other) {
  std::swap(request_id_, other->request_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameOverMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameOverMessage_descriptor_;
  metadata.reflection = GameOverMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameOverMessage

// optional int64 request_id = 1;
void GameOverMessage::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GameOverMessage::request_id() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.GameOverMessage.request_id)
  return request_id_;
}
 void GameOverMessage::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.GameOverMessage.request_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Heartbeat::kSequenceNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Heartbeat::Heartbeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas_code.protocol.Heartbeat)
}

void Heartbeat::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Heartbeat::Heartbeat(const Heartbeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas_code.protocol.Heartbeat)
}

void Heartbeat::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  sequence_num_ = GOOGLE_LONGLONG(0);
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:texas_code.protocol.Heartbeat)
  SharedDtor();
}

void Heartbeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Heartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Heartbeat_descriptor_;
}

const Heartbeat& Heartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Heartbeat* Heartbeat::default_instance_ = NULL;

Heartbeat* Heartbeat::New(::google::protobuf::Arena* arena) const {
  Heartbeat* n = new Heartbeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Heartbeat::Clear() {
  sequence_num_ = GOOGLE_LONGLONG(0);
}

bool Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas_code.protocol.Heartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 sequence_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas_code.protocol.Heartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas_code.protocol.Heartbeat)
  return false;
#undef DO_
}

void Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas_code.protocol.Heartbeat)
  // optional int64 sequence_num = 1;
  if (this->sequence_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sequence_num(), output);
  }

  // @@protoc_insertion_point(serialize_end:texas_code.protocol.Heartbeat)
}

::google::protobuf::uint8* Heartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas_code.protocol.Heartbeat)
  // optional int64 sequence_num = 1;
  if (this->sequence_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sequence_num(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas_code.protocol.Heartbeat)
  return target;
}

int Heartbeat::ByteSize() const {
  int total_size = 0;

  // optional int64 sequence_num = 1;
  if (this->sequence_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence_num());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Heartbeat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Heartbeat>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.sequence_num() != 0) {
    set_sequence_num(from.sequence_num());
  }
}

void Heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {

  return true;
}

void Heartbeat::Swap(Heartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Heartbeat::InternalSwap(Heartbeat* other) {
  std::swap(sequence_num_, other->sequence_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Heartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Heartbeat_descriptor_;
  metadata.reflection = Heartbeat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Heartbeat

// optional int64 sequence_num = 1;
void Heartbeat::clear_sequence_num() {
  sequence_num_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Heartbeat::sequence_num() const {
  // @@protoc_insertion_point(field_get:texas_code.protocol.Heartbeat.sequence_num)
  return sequence_num_;
}
 void Heartbeat::set_sequence_num(::google::protobuf::int64 value) {
  
  sequence_num_ = value;
  // @@protoc_insertion_point(field_set:texas_code.protocol.Heartbeat.sequence_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace texas_code

// @@protoc_insertion_point(global_scope)
